{
  "address": "0x52d907fCA60E91159B632eA166e9ede71248f68D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockMultiplier",
          "type": "uint256"
        }
      ],
      "name": "LocksUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rarityRegister",
          "type": "address"
        }
      ],
      "name": "RarityRegisterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardLastBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardInStream",
          "type": "uint256"
        }
      ],
      "name": "RewardStreamAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "TicketMintingChillPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "TicketMintingRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockMultiplier",
          "type": "uint256"
        }
      ],
      "name": "addLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addNftToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardStreamIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodBlockRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodLastBlock",
          "type": "uint256"
        }
      ],
      "name": "addRewardStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "claimTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getClaimableTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPeriodAverageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPeriodLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getHistoryAverageForStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getHistoryLengthBeforeStakerEntered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getStakerPoolShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getStakerReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getStakerRewardFromCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getStakerRewardFromHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getStakerTimeInHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRewardInCurrentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historyAverageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historyEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historyRewardPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historyStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_locks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_locksMultiplier",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_ticketsMintingRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ticketsMintingChillPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rarityRegister",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultStaker",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "locksMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rarityRegister",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardStreamInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardStreamsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deployedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRarityRegister",
          "type": "address"
        }
      ],
      "name": "setRarityRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ticketAddress",
          "type": "address"
        }
      ],
      "name": "setTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTicketsMintingChillPeriod",
          "type": "uint256"
        }
      ],
      "name": "setTicketsMintingChillPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTicketsMintingRatio",
          "type": "uint256"
        }
      ],
      "name": "setTicketsMintingRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportsHistory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketsMintingChillPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketsMintingRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCurrentlyStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "totalStakedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "unstakeERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockMultiplier",
          "type": "uint256"
        }
      ],
      "name": "updateLocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "userStakedTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLib.UserStakedToken",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakingUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "enteredAtBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "historyAverageRewardWhenEntered",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketsMintingRatioWhenEntered",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketsMintingChillPeriodWhenEntered",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTill",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardCredit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketsMinted",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StakingLib.UserStakedToken",
              "name": "userStakedToken",
              "type": "tuple"
            }
          ],
          "internalType": "struct StakingLib.UserStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9fa27a22e9923147b28582a020aa0a56b394aff9a9735320cf9ebb0ec62c43d",
  "receipt": {
    "to": null,
    "from": "0xA27DF20E6579aC472481F0Ea918165d24bFb713b",
    "contractAddress": "0x52d907fCA60E91159B632eA166e9ede71248f68D",
    "transactionIndex": 1,
    "gasUsed": "4030691",
    "logsBloom": "0x
    "blockHash": "0xb30df394d08fef99d0882046e615af8d2e1968cbfd15347736fccf03c4a6d9a6",
    "transactionHash": "0xc9fa27a22e9923147b28582a020aa0a56b394aff9a9735320cf9ebb0ec62c43d",
    "logs": [],
    "blockNumber": 26269956,
    "cumulativeGasUsed": "4064928",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5f6a90665f2f5529d057ebde09c84406",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockMultiplier\",\"type\":\"uint256\"}],\"name\":\"LocksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rarityRegister\",\"type\":\"address\"}],\"name\":\"RarityRegisterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardLastBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardInStream\",\"type\":\"uint256\"}],\"name\":\"RewardStreamAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TicketMintingChillPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TicketMintingRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockMultiplier\",\"type\":\"uint256\"}],\"name\":\"addLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addNftToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardStreamIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodBlockRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLastBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getClaimableTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriodAverageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getHistoryAverageForStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getHistoryLengthBeforeStakerEntered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerPoolShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerRewardFromCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerRewardFromHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerTimeInHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardInCurrentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historyAverageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historyEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historyRewardPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historyStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_locks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_locksMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_ticketsMintingRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketsMintingChillPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rarityRegister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultStaker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"locksMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarityRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStreamInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardStreamsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRarityRegister\",\"type\":\"address\"}],\"name\":\"setRarityRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketAddress\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTicketsMintingChillPeriod\",\"type\":\"uint256\"}],\"name\":\"setTicketsMintingChillPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTicketsMintingRatio\",\"type\":\"uint256\"}],\"name\":\"setTicketsMintingRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsMintingChillPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsMintingRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCurrentlyStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstakeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"userStakedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLib.UserStakedToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enteredAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyAverageRewardWhenEntered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsMintingRatioWhenEntered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsMintingChillPeriodWhenEntered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsMinted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLib.UserStakedToken\",\"name\":\"userStakedToken\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingLib.UserStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@author Gilbert Kim @gilbertk422\",\"kind\":\"dev\",\"methods\":{\"addLockDuration(uint256,uint256)\":{\"params\":{\"lockNumber\":\"the new lock duration value\"}},\"addNftToStake(address,uint256,address,uint256)\":{\"details\":\"The stake should existwhen adding the NFT we need to simulate an untake/stake because we need to recalculate the new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\",\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\",\"tokenAddress\":\"the address of the NFT\",\"tokenId\":\"the id of the NFT token\"}},\"addRewardStream(uint256,uint256,uint256)\":{\"params\":{\"periodBlockRate\":\"The reward per block\",\"periodLastBlock\":\"The last block of the period\",\"rewardStreamIndex\":\"The reward index\"}},\"getCurrentPeriodAverageReward()\":{\"returns\":{\"_0\":\"(uint256) The current period average\"}},\"getCurrentPeriodLength()\":{\"returns\":{\"_0\":\"(uint256) The current period length\"}},\"getHistoryAverageForStake(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The calculated history average\"}},\"getHistoryLength()\":{\"returns\":{\"_0\":\"(uint256) The history length\"}},\"getHistoryLengthBeforeStakerEntered(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The length of the history\"}},\"getStakerPoolShare(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The userPoolShare\"}},\"getStakerReward(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The total rewards acumulated till now\"}},\"getStakerRewardFromCurrent(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The reward for current period\"}},\"getStakerRewardFromHistory(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the staker you wish to get the rewards\"},\"returns\":{\"_0\":\"uint256 The amount of tokes user will get from history\"}},\"getStakerTimeInHistory(address,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\",\"staker\":\"the address of the owner of the stake\"},\"returns\":{\"_0\":\"(uint256) The number of blocks in history\"}},\"getTotalGeneratedReward()\":{\"returns\":{\"_0\":\"(uint256) The the calculated reward\"}},\"getTotalRewardInCurrentPeriod()\":{\"returns\":{\"_0\":\"(uint256) The current period total reward\"}},\"getUserStakes(address)\":{\"returns\":{\"_0\":\"(uint256) The number of all the stakes user has ever staked\"}},\"initialize(address,address,uint256[],uint256[],uint256,uint256,address,address)\":{\"params\":{\"_locks\":\"The array with the locks durations values\",\"_rarityRegister\":\"The rarity register address\",\"_rewardToken\":\"The reward token address\",\"_ticket\":\"The raffle ticket address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRarityRegister(address)\":{\"params\":{\"newRarityRegister\":\"the new value\"}},\"setTicket(address)\":{\"params\":{\"ticketAddress\":\"the new value\"}},\"setTicketsMintingChillPeriod(uint256)\":{\"params\":{\"newTicketsMintingChillPeriod\":\"the new value\"}},\"setTicketsMintingRatio(uint256)\":{\"params\":{\"newTicketsMintingRatio\":\"the new value\"}},\"stake(uint256,bytes)\":{\"details\":\"Users wil be able to unstake only after the lock durationn has pased.The lock duration in the data bytes is required, its the index of the locks array Should be the fist 32 bytes in the bytes array\",\"params\":{\"amount\":\"the inumber of tokens to be staked\",\"data\":\"the bytes containig extra information about the staking lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)\"}},\"stakeFor(address,uint256,bytes)\":{\"params\":{\"amount\":\"uint256 the amount of tokens to stake\",\"data\":\"bytes aditional for the stake and to include in the Stake event lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)\",\"user\":\"the address the tokens are staked for\"}},\"supportsHistory()\":{\"details\":\"Since we don't implement the optional interface, this always returns false\",\"returns\":{\"_0\":\"bool Whether or not the optional history functions are implemented\"}},\"token()\":{\"returns\":{\"_0\":\"address The address of the ERC20 token used for staking\"}},\"totalStaked()\":{\"returns\":{\"_0\":\"uint256 The number of tokens staked in the contract\"}},\"totalStakedFor(address)\":{\"params\":{\"staker\":\"address The address to query\"},\"returns\":{\"_0\":\"uint256 The number of tokens staked for the given address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256,bytes)\":{\"details\":\"Unstaking tokens is an atomic operation\\u2014either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\",\"params\":{\"amount\":\"uint256 the amount of tokens to unstake\",\"data\":\"bytes optional data to include in the Unstake event\"}},\"unstakeERC721(bytes)\":{\"params\":{\"data\":\"bytes optional data to include in the Unstake event\"}},\"updateLocks(uint256,uint256,uint256)\":{\"params\":{\"lockIndex\":\"the lock index\",\"lockNumber\":\"the new lock duration value\"}}},\"title\":\"A Staking smart contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLockDuration(uint256,uint256)\":{\"notice\":\"Will add a new lock duration value\"},\"addNftToStake(address,uint256,address,uint256)\":{\"notice\":\"Allows user to stake an nft to an existing stake for extra rewardit MUST revert if the added token has no multiplier\"},\"addRewardStream(uint256,uint256,uint256)\":{\"notice\":\"Will create a new rewad stream\"},\"getCurrentPeriodAverageReward()\":{\"notice\":\"Will calculate the current period average reward\"},\"getCurrentPeriodLength()\":{\"notice\":\"Will calculate the current period length\"},\"getHistoryAverageForStake(address,uint256)\":{\"notice\":\"Will calculate and return the history average for a stake\"},\"getHistoryLength()\":{\"notice\":\"Will calculate the history length in blocks\"},\"getHistoryLengthBeforeStakerEntered(address,uint256)\":{\"notice\":\"Will calculate and return what the history length was a the moment the stake was created\"},\"getStakerPoolShare(address,uint256)\":{\"notice\":\"Will get the pool share for a specific stake\"},\"getStakerReward(address,uint256)\":{\"notice\":\"Will calculate and return the total reward user has accumulated till now for a specific stake\"},\"getStakerRewardFromCurrent(address,uint256)\":{\"notice\":\"Will get the reward of a stake for the curent period\"},\"getStakerRewardFromHistory(address,uint256)\":{\"notice\":\"Will calculate the rewards that user will get from history\"},\"getStakerTimeInHistory(address,uint256)\":{\"notice\":\"Will calculate and return for how many block the stake has in history\"},\"getTotalGeneratedReward()\":{\"notice\":\"Will calculate the total reward generated from start till now\"},\"getTotalRewardInCurrentPeriod()\":{\"notice\":\"Will calculate the current period total reward\"},\"initialize(address,address,uint256[],uint256[],uint256,uint256,address,address)\":{\"notice\":\"Constructor\"},\"setRarityRegister(address)\":{\"notice\":\"Will update the rarityRegister address\"},\"setTicket(address)\":{\"notice\":\"Will update the ticket address\"},\"setTicketsMintingChillPeriod(uint256)\":{\"notice\":\"Will update the ticketsMintingChillPeriod\"},\"setTicketsMintingRatio(uint256)\":{\"notice\":\"Will update the numebr of stakingUnits needed to earn one ticket\"},\"stake(uint256,bytes)\":{\"notice\":\"Allows user to stake tokensOptionaly user can stake a NFT token for extra reward\"},\"stakeFor(address,uint256,bytes)\":{\"notice\":\"Stakes a certain amount of tokens, this MUST transfer the given amount from the callerMUST trigger Staked event\"},\"supportsHistory()\":{\"notice\":\"MUST return true if the optional history functions are implemented, otherwise false\"},\"token()\":{\"notice\":\"Address of the token being used by the staking interface\"},\"totalStaked()\":{\"notice\":\"Returns the current total of tokens staked\"},\"totalStakedFor(address)\":{\"notice\":\"Returns the current total of tokens staked for an address\"},\"unstake(uint256,bytes)\":{\"notice\":\"Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revertMUST trigger Unstaked event\"},\"unstakeERC721(bytes)\":{\"notice\":\"This function offers a way to withdraw a ERC721 after using failsafeUnstakeERC20.If for any reason the ERC721 should function again, this function allows to withdraw it.\"},\"updateLocks(uint256,uint256,uint256)\":{\"notice\":\"Will update an existing lock value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/NFTRarityRegister/INFTRarityRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Registry holding the rarity value of a given NFT.\\n/// @author Gilbert Kim @gilbertk422\\ninterface INFTRarityRegister {\\n\\t/**\\n\\t * The Staking SC allows to stake Prizes won via lottery which can be used to increase the APY of\\n\\t * staked tokens according to the rarity of NFT staked. For this reason,\\n\\t * we need to hold a table that the Staking SC can query and get back the rarity value of a given\\n\\t * NFT price (even the ones in the past).\\n\\t */\\n\\tevent NftRarityStored(\\n\\t\\taddress indexed tokenAddress,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 rarityValue\\n\\t);\\n\\n\\t/**\\n\\t * @dev Store the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @param rarityValue The rarity of a given NFT address and id unique combination\\n\\t */\\n\\tfunction storeNftRarity(address tokenAddress, uint256 tokenId, uint8 rarityValue) external;\\n\\n\\t/**\\n\\t * @dev Get the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @return The the rarity of a given NFT address and id unique combination and timestamp\\n\\t */\\n\\tfunction getNftRarity(address tokenAddress, uint256 tokenId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x943d04b4e4a5ed74355ac4406d33689fe525dffb38e197e076db1641a517848a\",\"license\":\"MIT\"},\"contracts/Raffle/IRaffleTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticekt for Coinburp Raffle\\n/// @author Gilbert Kim @gilbertk422\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x012a6017282b704f9d4a10524d6490582aae41ab5f721ea3dc4202de46a32896\",\"license\":\"MIT\"},\"contracts/Staking/ERC900.sol\":{\"content\":\"/* solium-disable */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC900 Simple Staking Interface\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\\n */\\ninterface ERC900 {\\n\\tevent Staked(address indexed user, uint256 amount, uint256 total, bytes data);\\n\\tevent Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\\n\\n\\tfunction stake(uint256 amount, bytes calldata data) external;\\n\\tfunction stakeFor(address user, uint256 amount, bytes calldata data) external;\\n\\tfunction unstake(uint256 amount, bytes calldata data) external;\\n\\tfunction totalStakedFor(address addr) external view returns (uint256);\\n\\tfunction totalStaked() external view returns (uint256);\\n\\tfunction token() external view returns (address);\\n\\tfunction supportsHistory() external pure returns (bool);\\n\\n\\t// NOTE: Not implementing the optional functions\\n\\t// function lastStakedFor(address addr) public view returns (uint256);\\n\\t// function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\\n\\t// function totalStakedAt(uint256 blockNumber) public view returns (uint256);\\n}\",\"keccak256\":\"0x3f3733f3772604f8cfbf15479f2f9c384a4016a6fe47a7ad85047db57b24a37e\",\"license\":\"MIT\"},\"contracts/Staking/RewardStreamer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RewardStreamerLib.sol\\\";\\n\\n\\n/// @title A Staking smart contract\\n/// @author Gilbert Kim @gilbertk422\\ncontract RewardStreamer {\\n\\n\\tRewardStreamerLib.RewardStreamInfo public rewardStreamInfo;\\n\\n\\tevent RewardStreamAdded(uint256 rewardPerBlock, uint256 rewardLastBlock, uint256 rewardInStream);\\n\\n\\tfunction rewardToken() public view returns (address) {return address(rewardStreamInfo.rewardToken);}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction _setRewardToken(address rewardTokenAddress) internal {\\n\\t\\tRewardStreamerLib.setRewardToken(rewardStreamInfo, rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new rewad stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction _addRewardStream(uint256 rewardStreamIndex, uint256 rewardPerBlock, uint256 rewardLastBlock) internal {\\n\\t\\tuint256 tokensInReward = RewardStreamerLib.addRewardStream(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\trewardStreamIndex,\\n\\t\\t\\trewardPerBlock,\\n\\t\\t\\trewardLastBlock\\n\\t\\t);\\n\\n\\t\\temit RewardStreamAdded(rewardPerBlock, rewardLastBlock, tokensInReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the ireward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction _iterateRewards(uint256 rewardStreamIndex, uint fromBlock, uint toBlock, uint256 rewardIndex) internal view returns (uint256) {\\n\\t\\treturn RewardStreamerLib.iterateRewards(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\trewardStreamIndex,\\n\\t\\t\\tfromBlock,\\n\\t\\t\\ttoBlock,\\n\\t\\t\\trewardIndex\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _bumpStreamCursor(uint256 rewardStreamIndex) private {\\n\\t\\tRewardStreamerLib.bumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\t}\\n}\\n\",\"keccak256\":\"0x22d52b36136a56fdd5f2516f0a73bb85de96b4ce0c01478f7158e6f7851ab6d4\",\"license\":\"MIT\"},\"contracts/Staking/RewardStreamerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary RewardStreamerLib {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct RewardStreamInfo {\\n\\t\\tRewardStream[] rewardStreams;\\n\\t\\tuint256 rewardStreamsLength;\\n\\t\\tuint256 deployedAtBlock;\\n\\t\\taddress rewardToken;\\n\\t}\\n\\n\\tstruct RewardStream {\\n\\t\\tuint256[] periodRewards;\\n\\t\\tuint256[] periodEnds;\\n\\t\\tuint256 rewardStreamCursor;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction setRewardToken(RewardStreamInfo storage rewardStreamInfo, address rewardTokenAddress) public {\\n\\t\\trewardStreamInfo.rewardToken = address(rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new rewad stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint256 rewardPerBlock,\\n\\t\\tuint256 rewardLastBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// e.g. current length = 0 and we add index 1\\n\\t\\trequire(rewardStreamIndex < rewardStreamInfo.rewardStreams.length.add(1), \\\"RewardStreamer: you cannot skip an index\\\");\\n\\n\\t\\tuint256 tokensInReward;\\n\\n\\t\\tif(rewardStreamInfo.rewardStreams.length > rewardStreamIndex) {\\n\\t\\t\\tRewardStream storage rewardStream = rewardStreamInfo.rewardStreams[rewardStreamIndex];\\n\\t\\t\\tuint256[] storage periodEnds = rewardStream.periodEnds;\\n\\n\\t\\t\\tuint periodStart = periodEnds.length == 0\\n\\t\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t\\t: periodEnds[periodEnds.length - 1];\\n\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t} else {\\n\\t\\t\\tRewardStream memory rewardStream;\\n\\n\\t\\t\\tuint periodStart = rewardStreamInfo.deployedAtBlock;\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams.push(rewardStream);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t}\\n\\n\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), tokensInReward);\\n\\n\\t\\treturn tokensInReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Get the rewards for a period\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the total reward\\n\\t*/\\n\\tfunction unsafeGetRewardsFromRange(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(!_isContract(msg.sender), \\\"StakingReward: unsafe function for contract call\\\");\\n\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\t0\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the ireward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction iterateRewards(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// the start block is bigger than\\n\\t\\tif(rewardIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex - 1];\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\treturn iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\tfunction getRewardAndUpdateCursor (\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 fromBlock,\\n\\t\\tuint256 toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewardsWithCursor(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardStreamInfo.rewardStreams[i].rewardStreamCursor\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\tfunction bumpStreamCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t// this step is important to avoid going out of index\\n\\t\\tif(rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor < rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor = rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor.add(1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction iterateRewardsWithCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardPeriodIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif(rewardPeriodIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardPeriodIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardPeriodIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex - 1];\\n\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\t// the fromBlock passed this reward period, we can start\\n\\t\\t\\t// skipping it for next reads\\n\\t\\t\\tbumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\n\\t\\t\\treturn iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Returns true if `account` is a contract.\\n\\t* @param account the address to check\\n\\t* @return (bool) if the account is a contract\\n\\t*/\\n\\tfunction _isContract(address account) public view returns (bool) {\\n\\t\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t\\t// constructor execution.\\n\\n\\t\\t\\tuint256 size;\\n\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\t\\tassembly { size := extcodesize(account) }\\n\\t\\t\\treturn size > 0;\\n\\t}\\n}\",\"keccak256\":\"0xf000bdedc7c108f1c4e8193691f3a86d8f69f1b2505fabd3909e757ac64ae6f7\",\"license\":\"MIT\"},\"contracts/Staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ERC900.sol\\\";\\nimport \\\"./RewardStreamer.sol\\\";\\nimport \\\"./StakingLib.sol\\\";\\n\\n/// @title A Staking smart contract\\n/// @author Gilbert Kim @gilbertk422\\ncontract Staking is Initializable, ERC900, OwnableUpgradeable, RewardStreamer {\\n\\tusing SafeMath for uint256;\\n\\n\\tStakingLib.StakingInfo stakingInfo;\\n\\n\\tmapping(address => StakingLib.UserStake[]) private _userStakes;\\n\\n\\t/**\\n\\t * Constructor\\n\\t * @param _rewardToken The reward token address\\n\\t * @param _ticket The raffle ticket address\\n\\t * @param _locks The array with the locks durations values\\n\\t * @param _rarityRegister The rarity register address\\n\\t */\\n\\tfunction initialize (\\n\\t\\taddress _rewardToken,\\n\\t\\taddress _ticket,\\n\\t\\tuint256[] memory _locks,\\n\\t\\tuint256[] memory _locksMultiplier,\\n\\t\\tuint256 _ticketsMintingRatio,\\n\\t\\tuint256 _ticketsMintingChillPeriod,\\n\\t\\taddress _rarityRegister,\\n\\t\\taddress _defaultStaker\\n\\t) public initializer {\\n\\t\\trequire(_locks.length == _locksMultiplier.length, 'Stake: lock multiplier should have the same length ad locks');\\n\\t\\tOwnableUpgradeable.__Ownable_init();\\n\\n\\t\\tsuper._setRewardToken(_rewardToken);\\n\\n\\t\\t// add the default staker. we need a default staker to neveer have 0 staking units\\n\\t\\t_addStaker(_defaultStaker, 1 * 10**18, block.number.add(1), 0);\\n\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits.add(1 * 10 ** 18);\\n\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked.add(1 * 10 ** 18);\\n\\n\\t\\tstakingInfo.locks = _locks;\\n\\t\\tstakingInfo.locksMultiplier = _locksMultiplier;\\n\\t\\tstakingInfo.historyStartBlock = block.number;\\n\\t\\tstakingInfo.historyEndBlock = block.number;\\n\\n\\t\\tsetTicketsMintingChillPeriod(_ticketsMintingChillPeriod);\\n\\t\\tsetTicketsMintingRatio(_ticketsMintingRatio);\\n\\t\\tsetTicket(_ticket);\\n\\t\\tsetRarityRegister(_rarityRegister);\\n\\n\\t\\tRewardStreamer.rewardStreamInfo.deployedAtBlock = block.number;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new rewad stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param periodBlockRate The reward per block\\n\\t* @param periodLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(uint256 rewardStreamIndex, uint256 periodBlockRate, uint256 periodLastBlock) public onlyOwner {\\n\\t\\tsuper._addRewardStream(rewardStreamIndex, periodBlockRate, periodLastBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will add a new lock duration value\\n\\t* @param lockNumber the new lock duration value\\n\\t*/\\n\\tfunction addLockDuration(uint256 lockNumber, uint256 lockMultiplier) public onlyOwner {\\n\\t\\tstakingInfo.locks.push(lockNumber);\\n\\t\\tstakingInfo.locksMultiplier.push(lockMultiplier);\\n\\n\\t\\temit LocksUpdated(stakingInfo.locks.length.sub(1), lockNumber, lockMultiplier);\\n\\t}\\n\\n\\tevent LocksUpdated(uint256 lockIndex, uint256 lockNumber, uint256 lockMultiplier);\\n\\t/**\\n\\t* @notice Will update an existing lock value\\n\\t* @param lockIndex the lock index\\n\\t* @param lockNumber the new lock duration value\\n\\t*/\\n\\tfunction updateLocks(uint256 lockIndex, uint256 lockNumber, uint256 lockMultiplier) public onlyOwner {\\n\\t\\tstakingInfo.locks[lockIndex] = lockNumber;\\n\\t\\tstakingInfo.locksMultiplier[lockIndex] = lockMultiplier;\\n\\n\\t\\temit LocksUpdated(lockIndex, lockNumber, lockMultiplier);\\n\\t}\\n\\n\\tevent TicketMintingChillPeriodUpdated(uint256 newValue);\\n\\n\\t/**\\n\\t* @notice Will update the ticketsMintingChillPeriod\\n\\t* @param newTicketsMintingChillPeriod the new value\\n\\t*/\\n\\tfunction setTicketsMintingChillPeriod(uint256 newTicketsMintingChillPeriod) public onlyOwner {\\n\\t\\trequire(newTicketsMintingChillPeriod > 0, \\\"Staking: ticketsMintingChillPeriod can't be zero\\\");\\n\\t\\tstakingInfo.ticketsMintingChillPeriod = newTicketsMintingChillPeriod;\\n\\n\\t\\temit TicketMintingChillPeriodUpdated(newTicketsMintingChillPeriod);\\n\\t}\\n\\n\\tevent TicketMintingRatioUpdated(uint256 newValue);\\n\\t/**\\n\\t* @notice Will update the numebr of stakingUnits needed to earn one ticket\\n\\t* @param newTicketsMintingRatio the new value\\n\\t*/\\n\\tfunction setTicketsMintingRatio(uint256 newTicketsMintingRatio) public onlyOwner {\\n\\t\\tstakingInfo.ticketsMintingRatio = newTicketsMintingRatio;\\n\\n\\t\\temit TicketMintingRatioUpdated(newTicketsMintingRatio);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will update the ticket address\\n\\t* @param ticketAddress the new value\\n\\t*/\\n\\tfunction setTicket(address ticketAddress) public onlyOwner {\\n\\t\\tstakingInfo.ticket = ticketAddress;\\n\\t}\\n\\n\\n\\tevent RarityRegisterUpdated(address rarityRegister);\\n\\t/**\\n\\t* @notice Will update the rarityRegister address\\n\\t* @param newRarityRegister the new value\\n\\t*/\\n\\tfunction setRarityRegister(address newRarityRegister) public onlyOwner {\\n\\t\\tstakingInfo.rarityRegister = newRarityRegister;\\n\\n\\t\\temit RarityRegisterUpdated(newRarityRegister);\\n\\t}\\n\\n\\n\\t/**\\n\\t* @notice Will calculate the total reward generated from start till now\\n\\t* @return (uint256) The the calculated reward\\n\\t*/\\n\\tfunction getTotalGeneratedReward() external view returns(uint256) {\\n\\t\\treturn RewardStreamerLib.unsafeGetRewardsFromRange(rewardStreamInfo, stakingInfo.historyStartBlock, block.number);\\n\\t}\\n\\n\\tfunction historyStartBlock() public view returns (uint256) {return stakingInfo.historyStartBlock;}\\n\\tfunction historyEndBlock() public view returns (uint256) {return stakingInfo.historyEndBlock;}\\n\\tfunction historyAverageReward() public view returns (uint256) {return stakingInfo.historyAverageReward;}\\n\\tfunction historyRewardPot() public view returns (uint256) {return stakingInfo.historyRewardPot;}\\n\\tfunction totalCurrentlyStaked() public view returns (uint256) {return stakingInfo.totalCurrentlyStaked;}\\n\\tfunction totalStakingUnits() public view returns (uint256) {return stakingInfo.totalStakingUnits;}\\n\\tfunction totalDistributedRewards() public view returns (uint256) {return stakingInfo.totalDistributedRewards;}\\n\\tfunction ticketsMintingRatio() public view returns (uint256) {return stakingInfo.ticketsMintingRatio;}\\n\\tfunction ticketsMintingChillPeriod() public view returns (uint256) {return stakingInfo.ticketsMintingChillPeriod;}\\n\\tfunction rarityRegister() public view returns (address) {return stakingInfo.rarityRegister;}\\n\\tfunction locks(uint256 i) public view returns (uint256) {return stakingInfo.locks[i];}\\n\\tfunction locksMultiplier(uint256 i) public view returns (uint256) {return stakingInfo.locksMultiplier[i];}\\n\\tfunction userStakes(address staker, uint256 i) public view returns (StakingLib.UserStake memory) {\\n\\t\\tStakingLib.UserStake memory s;\\n\\n\\t\\treturn _userStakes[staker].length > i\\n\\t\\t\\t? _userStakes[staker][i]\\n\\t\\t\\t: s;\\n\\t}\\n\\tfunction userStakedTokens(address staker, uint256 stakeIndex) public view returns (StakingLib.UserStakedToken memory) {\\n\\t\\tStakingLib.UserStakedToken memory s;\\n\\n\\t\\treturn _userStakes[staker].length > stakeIndex\\n\\t\\t\\t? _userStakes[staker][stakeIndex].userStakedToken\\n\\t\\t\\t: s;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength() public view returns(uint256) {\\n\\t\\treturn StakingLib.getCurrentPeriodLength(stakingInfo);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period total reward\\n\\t* @return (uint256) The current period total reward\\n\\t*/\\n\\tfunction getTotalRewardInCurrentPeriod() public view returns(uint256) {\\n\\t\\treturn RewardStreamerLib.unsafeGetRewardsFromRange(rewardStreamInfo, stakingInfo.historyEndBlock, block.number);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period average reward\\n\\t* @return (uint256) The current period average\\n\\t*/\\n\\tfunction getCurrentPeriodAverageReward() public view returns(uint256) {\\n\\t\\treturn StakingLib.getCurrentPeriodAverageReward(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tgetTotalRewardInCurrentPeriod(),\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the history length in blocks\\n\\t* @return (uint256) The history length\\n\\t*/\\n\\tfunction getHistoryLength() public view returns (uint256){\\n\\t\\treturn StakingLib.getHistoryLength(stakingInfo);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will get the pool share for a specific stake\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The userPoolShare\\n\\t*/\\n\\tfunction getStakerPoolShare(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.userPoolShare(\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\n\\t/**\\n\\t* @notice Will get the reward of a stake for the curent period\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The reward for current period\\n\\t*/\\n\\tfunction getStakerRewardFromCurrent(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getStakerRewardFromCurrentPeriod(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return for how many block the stake has in history\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The number of blocks in history\\n\\t*/\\n\\tfunction getStakerTimeInHistory(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return what the history length was a the moment the stake was created\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The length of the history\\n\\t*/\\n\\tfunction getHistoryLengthBeforeStakerEntered(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getHistoryLengthBeforeStakerEntered(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the history average for a stake\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The calculated history average\\n\\t*/\\n\\tfunction getHistoryAverageForStake(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getHistoryAverageForStaker(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @return (uint256) The number of all the stakes user has ever staked\\n\\t*/\\n\\tfunction getUserStakes(address staker) public view returns(uint256) {\\n\\t\\treturn _userStakes[staker].length;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards acumulated till now\\n\\t*/\\n\\tfunction getStakerReward(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the rewards that user will get from history\\n\\t* @param staker the address of the staker you wish to get the rewards\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return uint256 The amount of tokes user will get from history\\n\\t*/\\n\\tfunction getStakerRewardFromHistory(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\treturn StakingLib.getStakerRewardFromHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getClaimableTickets(address staker, uint256 stakeIndex) public view returns (uint256) {\\n\\t\\trequire(_userStakes[staker].length > stakeIndex, \\\"Staking: stake does not exist\\\");\\n\\n\\t\\treturn StakingLib.getClaimableTickets(\\n\\t\\t\\t_userStakes[staker][stakeIndex]\\n\\t\\t);\\n\\t}\\n\\n\\tfunction claimTickets(uint256 stakeIndex) public {\\n\\t\\trequire(_userStakes[msg.sender].length > stakeIndex, \\\"Staking: stake does not exist\\\");\\n\\n\\t\\tStakingLib.claimTickets(\\n\\t\\t\\tstakingInfo.ticket,\\n\\t\\t\\t_userStakes[msg.sender][stakeIndex],\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Creates a stake instance for the staker\\n\\t* @notice MUST trigger Staked event\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t* @param stakerAddress the address of the owner of the stake\\n\\t* @param amountStaked the number of tokens to be staked\\n\\t* @param blockNumber the block number at which the stake is created\\n\\t* @param lockDuration the duration for which the tokens will be locked\\n\\t*/\\n\\tfunction _addStaker(address stakerAddress, uint256 amountStaked, uint256 blockNumber, uint256 lockDuration) internal {\\n\\t\\t_userStakes[stakerAddress].push(StakingLib.UserStake({\\n\\t\\t\\tamountStaked: amountStaked,\\n\\t\\t\\tstakingUnits: amountStaked,\\n\\t\\t\\tenteredAtBlock: blockNumber,\\n\\t\\t\\thistoryAverageRewardWhenEntered: stakingInfo.historyAverageReward,\\n\\t\\t\\tticketsMintingRatioWhenEntered: stakingInfo.ticketsMintingRatio,\\n\\t\\t\\tticketsMintingChillPeriodWhenEntered: stakingInfo.ticketsMintingChillPeriod,\\n\\t\\t\\tlockedTill: blockNumber.add(lockDuration),\\n\\t\\t\\trewardCredit: 0,\\n\\t\\t\\tticketsMinted: 0,\\n\\t\\t\\tuserStakedToken: StakingLib.UserStakedToken({\\n\\t\\t\\t\\t\\ttokenAddress: address(0),\\n\\t\\t\\t\\t\\ttokenId: 0\\n\\t\\t\\t\\t})\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\temit Staked(stakerAddress, amountStaked, stakingInfo.totalCurrentlyStaked, abi.encodePacked(_userStakes[stakerAddress].length.sub(1)));\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake tokens\\n\\t* @notice Optionaly user can stake a NFT token for extra reward\\n\\t* @dev Users wil be able to unstake only after the lock durationn has pased.\\n\\t* @dev The lock duration in the data bytes is required, its the index of the locks array\\n\\t* Should be the fist 32 bytes in the bytes array\\n\\t* @param amount the inumber of tokens to be staked\\n\\t* @param data the bytes containig extra information about the staking\\n\\t* lock duration index: fist 32 bytes (Number) - Required\\n\\t* NFT address: next 20 bytes (address)\\n\\t* NFT tokenId: next 32 bytes (Number)\\n\\t*/\\n\\tfunction stake(uint256 amount, bytes calldata data) public override {\\n\\t\\tStakingLib.stake(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[msg.sender],\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tamount,\\n\\t\\t\\tdata\\n\\t\\t);\\n\\n\\t\\temit Staked(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tamount,\\n\\t\\t\\tstakingInfo.totalCurrentlyStaked,\\n\\t\\t\\tabi.encodePacked(_userStakes[msg.sender].length.sub(1))\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\\n\\t* @notice MUST trigger Staked event\\n\\t* @param user the address the tokens are staked for\\n\\t* @param amount uint256 the amount of tokens to stake\\n\\t* @param data bytes aditional for the stake and to include in the Stake event\\n\\t* lock duration index: fist 32 bytes (Number) - Required\\n\\t* NFT address: next 20 bytes (address)\\n\\t* NFT tokenId: next 32 bytes (Number)\\n\\t*/\\n\\tfunction stakeFor(address user, uint256 amount, bytes calldata data) external override {\\n\\t\\tStakingLib.stake(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[user],\\n\\t\\t\\tuser,\\n\\t\\t\\tamount,\\n\\t\\t\\tdata\\n\\t\\t);\\n\\t\\temit Staked(user, amount, stakingInfo.totalCurrentlyStaked, abi.encodePacked(_userStakes[user].length.sub(1)));\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The stake should exist\\n\\t* @dev when adding the NFT we need to simulate an untake/stake because we need to recalculate the\\n\\t* new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\\n\\t* @notice it MUST revert if the added token has no multiplier\\n\\t* @param staker the address of the owner of the stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @param tokenAddress the address of the NFT\\n\\t* @param tokenId the id of the NFT token\\n\\t*/\\n\\tfunction addNftToStake(address staker, uint256 stakeIndex, address tokenAddress, uint256 tokenId) public {\\n\\t\\tStakingLib.addNftToStake(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[staker],\\n\\t\\t\\tstakeIndex,\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revert\\n\\t* @notice MUST trigger Unstaked event\\n\\t* @dev Unstaking tokens is an atomic operation\\u2014either all of the tokens in a stake, or none of the tokens.\\n\\t* @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\\n\\t*   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\\n\\t* @param amount uint256 the amount of tokens to unstake\\n\\t* @param data bytes optional data to include in the Unstake event\\n\\t*/\\n\\tfunction unstake(uint256 amount, bytes calldata data) public override {\\n\\t\\tuint256 stakerReward = StakingLib.unstake(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\t_userStakes[msg.sender],\\n\\t\\t\\tStakingLib.getStakeIndexFromCalldata(data)\\n\\t\\t);\\n\\n\\t\\temit Unstaked(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tstakerReward,\\n\\t\\t\\tstakingInfo.totalCurrentlyStaked,\\n\\t\\t\\tabi.encodePacked(StakingLib.getStakeIndexFromCalldata(data))\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice This function offers a way to withdraw a ERC721 after using failsafeUnstakeERC20.\\n\\t* @notice If for any reason the ERC721 should function again, this function allows to withdraw it.\\n\\t* @param data bytes optional data to include in the Unstake event\\n\\t*/\\n\\tfunction unstakeERC721(bytes calldata data) external {\\n\\t\\tuint256 stakeIndex = StakingLib.getStakeIndexFromCalldata(data);\\n\\t\\trequire(_userStakes[msg.sender][stakeIndex].lockedTill < block.number, \\\"Staking: Stake is still locked\\\");\\n\\n\\t\\tStakingLib.removeNftFromStake(\\n\\t\\t\\t_userStakes[msg.sender][stakeIndex].userStakedToken,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the current total of tokens staked for an address\\n\\t* @param staker address The address to query\\n\\t* @return uint256 The number of tokens staked for the given address\\n\\t*/\\n\\tfunction totalStakedFor(address staker) external override view returns (uint256) {\\n\\t\\treturn StakingLib.getTotalStakedFor(_userStakes[staker]);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Returns the current total of tokens staked\\n\\t* @return uint256 The number of tokens staked in the contract\\n\\t*/\\n\\tfunction totalStaked() external override view returns (uint256) {\\n\\t\\treturn stakingInfo.totalCurrentlyStaked;\\n\\t}\\n\\n\\t/**\\n\\t* @notice MUST return true if the optional history functions are implemented, otherwise false\\n\\t* @dev Since we don't implement the optional interface, this always returns false\\n\\t* @return bool Whether or not the optional history functions are implemented\\n\\t*/\\n\\tfunction supportsHistory() external override pure returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Address of the token being used by the staking interface\\n\\t* @return address The address of the ERC20 token used for staking\\n\\t*/\\n\\tfunction token() external override view returns (address) {\\n\\t\\treturn address(rewardStreamInfo.rewardToken);\\n\\t}\\n}\\n\",\"keccak256\":\"0x36b855426289a3974190903e5d4316a45880e6380c66645e6f35aca799bb14bc\",\"license\":\"MIT\"},\"contracts/Staking/StakingLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../NFTRarityRegister/INFTRarityRegister.sol\\\";\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\nimport \\\"./RewardStreamerLib.sol\\\";\\n\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary StakingLib {\\n\\tusing SafeMath for uint256;\\n  // **************************\\n\\t// **| StakingLib section |**\\n  // **************************\\n\\n\\tstruct StakingInfo {\\n\\t\\tuint256 historyStartBlock; // this is set only when we deploy the contract\\n\\t\\tuint256 historyEndBlock; // it starts and finishes in the same block (so length is 0)\\n\\t\\tuint256 historyAverageReward; // how many reward tokens (in Wei) we give PER TOKEN STAKED PER BLOCK\\n\\t\\tuint256 historyRewardPot; // the tokens unclaimed from history\\n\\n\\t\\tuint256 totalCurrentlyStaked; // the actual amount of $BURP tokens sent from users\\n\\t\\tuint256 totalStakingUnits; // sum of all user stake shares\\n\\n\\t\\tuint256 totalDistributedRewards; // sum of all distributed rewards, mainly helpful for testing\\n\\n\\t\\tuint256[] locks;\\n\\t\\tuint256[] locksMultiplier;\\n\\n\\t\\tuint256 ticketsMintingRatio;\\n\\t\\tuint256 ticketsMintingChillPeriod;\\n\\n\\t\\taddress ticket;\\n\\t\\taddress rarityRegister;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will get the lock duration from the stake bytes data\\n\\t* @dev the bytes should contain the index of the lock in the first 32 bytes\\n\\t* @dev the index should be < locks.length\\n\\t* @param data bytes from the stake action\\n\\t* @return uint256 The duration of the lock (time for wich the stake will be locked)\\n\\t*/\\n\\tfunction getLockDuration(StakingInfo storage stakingInfo, bytes memory data) public view returns (uint256, uint256) {\\n\\t\\trequire(data.length >= 32, 'Stake: data should by at least 32 bytes');\\n\\n\\t\\tuint256 lengthIndex = getStakeIndexFromCalldata(data);\\n\\n\\t\\trequire(lengthIndex < stakingInfo.locks.length, 'Stake: lock index out of bounds');\\n\\n\\t\\treturn (stakingInfo.locks[lengthIndex], lengthIndex);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo) public view returns(uint256) {\\n\\t\\treturn uint256(block.number).sub(stakingInfo.historyEndBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length optionaly including the last block\\n\\t* @param excludeLast a flag that indicates to include the last block or not\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo, bool excludeLast) public view returns(uint256) {\\n\\t\\treturn excludeLast ? getCurrentPeriodLength(stakingInfo).sub(1) : getCurrentPeriodLength(stakingInfo);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the history length in blocks\\n\\t* @return (uint256) The history length\\n\\t*/\\n\\tfunction getHistoryLength(StakingInfo storage stakingInfo) public view returns (uint256){\\n\\t\\treturn stakingInfo.historyEndBlock.sub(stakingInfo.historyStartBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the average reward for the current period\\n\\t* @param stakingInfo the struct containing staking info\\n\\t* @param totalReward the total reward in current period\\n\\t* @param excludeLast wether or not exclude the last block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getCurrentPeriodAverageReward(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 totalReward,\\n\\t\\tbool excludeLast\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakingInfo.totalStakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 currentPeriodLength = getCurrentPeriodLength(stakingInfo, excludeLast);\\n\\t\\tif(currentPeriodLength == 0 ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn totalReward\\n\\t\\t\\t.mul(10**18)\\n\\t\\t\\t.div(stakingInfo.totalStakingUnits)\\n\\t\\t\\t.div(currentPeriodLength);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the total generated reward for a period\\n\\t* @param _block the current block\\n\\t* @param historyStartBlock the first history block\\n\\t* @param rewardPerBlock the amount of tokens rewarded per block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction totalGeneratedReward(uint256 _block, uint256 historyStartBlock, uint256 rewardPerBlock) public pure returns(uint256) {\\n\\t\\treturn (_block.sub(historyStartBlock)).mul(rewardPerBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction _stakerRewardFromCurrentPeriod(\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerBalance,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\treturn totalRewardInCurrentPeriod\\n\\t\\t\\t.mul(stakerBalance)\\n\\t\\t\\t.div(totalStakingUnits);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriod(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.unsafeGetRewardsFromRange(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number\\n\\t\\t);\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriod(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\tbool excludeLast\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number.sub(1)\\n\\t\\t);\\n\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards acumulated till now\\n\\t*/\\n\\tfunction getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriod(rewardStreamInfo, stakingInfo, userStakes, stakeIndex);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward.add(historyPeriodReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards acumulated till now\\n\\t*/\\n\\tfunction _getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriod(rewardStreamInfo, stakingInfo, userStakes, stakeIndex, true);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward.add(historyPeriodReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Creates a stake instance for the staker\\n\\t* @notice MUST trigger Staked event\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t* @param amountStaked the number of tokens to be staked\\n\\t* @param blockNumber the block number at which the stake is created\\n\\t* @param lockDuration the duration for which the tokens will be locked\\n\\t*/\\n\\tfunction addStake(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 amountStaked,\\n\\t\\tuint256 stakingUnits,\\n\\t\\tuint256 blockNumber,\\n\\t\\tuint256 lockDuration\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuserStakes.push(UserStake({\\n\\t\\t\\t\\tamountStaked: amountStaked,\\n\\t\\t\\t\\tstakingUnits: stakingUnits,\\n\\t\\t\\t\\tenteredAtBlock: blockNumber,\\n\\t\\t\\t\\thistoryAverageRewardWhenEntered: stakingInfo.historyAverageReward,\\n\\t\\t\\t\\tticketsMintingRatioWhenEntered: stakingInfo.ticketsMintingRatio,\\n\\t\\t\\t\\tticketsMintingChillPeriodWhenEntered: stakingInfo.ticketsMintingChillPeriod,\\n\\t\\t\\t\\tlockedTill: blockNumber.add(lockDuration),\\n\\t\\t\\t\\trewardCredit: 0,\\n\\t\\t\\t\\tticketsMinted: 0,\\n\\t\\t\\t\\tuserStakedToken: StakingLib.UserStakedToken({\\n\\t\\t\\t\\t\\ttokenAddress: address(0),\\n\\t\\t\\t\\t\\ttokenId: 0\\n\\t\\t\\t\\t})\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake tokens\\n\\t* @notice Optionaly user can stake a NFT token for extra reward\\n\\t* @dev Users wil be able to unstake only after the lock durationn has pased.\\n\\t* @dev The lock duration in the data bytes is required, its the index of the locks array\\n\\t* Should be the fist 32 bytes in the bytes array\\n\\t* @param amount the inumber of tokens to be staked\\n\\t* @param data the bytes containig extra information about the staking\\n\\t* lock duration index: fist 32 bytes (Number) - Required\\n\\t* NFT address: next 20 bytes (address)\\n\\t* NFT tokenId: next 32 bytes (Number)\\n\\t*/\\n\\tfunction stake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\taddress staker,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t\\t(uint256 lockDuration, uint256 lockIndex) = getLockDuration(stakingInfo, data);\\n\\n\\t\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), amount);\\n\\n\\t\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t\\tuint256 durationMultiplier = stakingInfo.locksMultiplier[lockIndex];\\n\\n\\t\\t\\t// when staking without any multiplier, staking units and amount are identical\\n\\t\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits.add(applyPercent(amount, durationMultiplier));\\n\\t\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked.add(amount);\\n\\n\\t\\t\\taddStake(stakingInfo, userStakes, amount, applyPercent(amount, durationMultiplier), block.number, lockDuration);\\n\\n\\t\\t\\tif (data.length >= 84) { // [32, 20. 32] == [index, address, tokenId]\\n\\t\\t\\t\\taddNftToStake(\\n\\t\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\t\\tstakingInfo,\\n\\t\\t\\t\\t\\tuserStakes,\\n\\t\\t\\t\\t\\tuserStakes.length.sub(1),\\n\\t\\t\\t\\t\\tgetTokenAddressFromCalldata(data),\\n\\t\\t\\t\\t\\tgetTokenIdFromCalldata(data)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tclaimTickets(\\n\\t\\t\\t\\tstakingInfo.ticket,\\n\\t\\t\\t\\tuserStakes[userStakes.length.sub(1)], // last stake just created\\n\\t\\t\\t\\tstaker\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the new history reward pot\\n\\t* @param oldHistoryRewardPot the old history reward pot\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param stakerReward the staker reward\\n\\t* @return (uint256) the new history reward pot\\n\\t*/\\n\\tfunction historyRewardPot(\\n\\t\\tuint256 oldHistoryRewardPot,\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerReward\\n\\t) public pure returns(uint256) {\\n\\t\\treturn oldHistoryRewardPot\\n\\t\\t\\t.add(totalRewardInCurrentPeriod)\\n\\t\\t\\t.sub(stakerReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an uint256\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parse32BytesToUint256(bytes memory data, uint256 from) public pure returns (uint256 parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 32))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an address\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parseBytesToAddress(bytes memory data, uint256 from) public pure returns (address parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 20))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the stake index\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed index\\n\\t*/\\n\\tfunction getStakeIndexFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 0);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT address\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (address) the parsed address\\n\\t*/\\n\\tfunction getTokenAddressFromCalldata(bytes memory data) public pure returns (address) {\\n\\t\\treturn parseBytesToAddress(data, 32);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT tokeId\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed tokenId\\n\\t*/\\n\\tfunction getTokenIdFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 52);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will apply a percentage to a number\\n\\t* @param number The number to multiply\\n\\t* @param percent The percentage to apply\\n\\t* @return (uint256) the operation result\\n\\t*/\\n\\tfunction applyPercent(uint256 number, uint256 percent) public pure returns (uint256) {\\n\\t\\treturn number.mul(percent).div(100);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculates the new History Average Reward\\n\\t* @dev this is called **before** we update history end block\\n\\t* @return uint256 The calculated newHistoryAverageReward\\n\\t*/\\n\\tfunction getNewHistoryAverageReward(\\n\\t\\tuint256 currentPeriodLength,\\n\\t\\tuint256 currentPeriodAverageReward,\\n\\t\\tuint256 currentHistoryLength,\\n\\t\\tuint256 historyStartBlock,\\n\\t\\tuint256 historyAverageReward\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 blockNumber = block.number;\\n\\t\\tuint256 newHistoryLength = uint256(blockNumber).sub(1).sub(historyStartBlock);\\n\\n\\t\\tuint256 fromCurrent = currentPeriodLength.mul(currentPeriodAverageReward);\\n\\t\\tuint256 fromHistory = currentHistoryLength.mul(historyAverageReward);\\n\\n\\t\\tuint256 newHistoryAverageReward = (\\n\\t\\t\\t(fromCurrent).add(fromHistory)\\n\\t\\t)\\n\\t\\t.div(newHistoryLength);\\n\\n\\t\\treturn newHistoryAverageReward;\\n\\t}\\n\\n\\tfunction updateHistoryValues(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 totalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number.sub(1)\\n\\t\\t);\\n\\t\\tuint256 currentPeriodAverageReward = getCurrentPeriodAverageReward(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\n\\t\\t// 1. we update the stakingInfo.historyAverageReward with the WEIGHTED average of history reward and current reward\\n\\t\\tstakingInfo.historyAverageReward = getNewHistoryAverageReward(\\n\\t\\t\\tgetCurrentPeriodLength(stakingInfo, true),\\n\\t\\t\\tcurrentPeriodAverageReward,\\n\\t\\t\\tgetHistoryLength(stakingInfo),\\n\\t\\t\\tstakingInfo.historyStartBlock,\\n\\t\\t\\tstakingInfo.historyAverageReward\\n\\t\\t);\\n\\n\\t\\t// 2. we push the currentPeriodReward in the history\\n\\t\\tstakingInfo.historyRewardPot = historyRewardPot(\\n\\t\\t\\t\\tstakingInfo.historyRewardPot,\\n\\t\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t// 3. we update the stakingInfo.historyEndBlock;\\n\\t\\tstakingInfo.historyEndBlock = uint256(block.number).sub(1);\\n\\t}\\n\\n\\tfunction setTicketsMintingRatio(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 mintingRatio\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tstakingInfo.ticketsMintingRatio = mintingRatio;\\n\\t}\\n\\n  // *****************************\\n\\t// *** UserStakesLib section ***\\n\\t// *****************************\\n\\n\\tstruct UserStakedToken {\\n\\t\\taddress tokenAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\tstruct UserStake {\\n\\t\\tuint256 stakingUnits;\\n\\t\\tuint256 amountStaked;\\n\\t\\tuint256 enteredAtBlock;\\n\\t\\tuint256 historyAverageRewardWhenEntered;\\n\\t\\tuint256 ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 lockedTill;\\n\\t\\tuint256 rewardCredit;\\n\\t\\tuint256 ticketsMinted;\\n\\t\\tUserStakedToken userStakedToken;\\n\\t}\\n\\n\\tfunction getTotalStakedFor(\\n\\t\\tUserStake[] storage userStakes\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 total;\\n\\n\\t\\tfor (uint i = 0; i < userStakes.length; i++) {\\n\\t\\t\\ttotal = total.add(userStakes[i].amountStaked);\\n\\t\\t}\\n\\n\\t\\treturn total;\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Calculate the staker time in history\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getStakerTimeInHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].enteredAtBlock == 0 || userStakes[stakeIndex].enteredAtBlock > stakingInfo.historyEndBlock) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn stakingInfo.historyEndBlock.sub(userStakes[stakeIndex].enteredAtBlock).add(1);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return what the history length was a the moment the stake was created\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The length of the history\\n\\t*/\\n\\tfunction getHistoryLengthBeforeStakerEntered(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 enteredAtBlock = userStakes[stakeIndex].enteredAtBlock;\\n\\n\\t\\tif (enteredAtBlock == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn enteredAtBlock.sub(stakingInfo.historyStartBlock).sub(1);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the user share in the pool\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculater pool share\\n\\t*/\\n\\tfunction userPoolShare(\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\n\\t\\treturn stakerBalance.mul(10**18).div(totalStakingUnits);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the history average for staker\\n\\t* @return (uint256) the calculated average\\n\\t*/\\n\\tfunction getHistoryAverageForStaker(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 historyAverageRewardWhenEntered = userStakes[stakeIndex].historyAverageRewardWhenEntered;\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\tif(blocksParticipatedInHistory == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyLength = getHistoryLength(stakingInfo);\\n\\n\\t\\tuint256 historyLengthBeforeStakerEntered = getHistoryLengthBeforeStakerEntered(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn stakingInfo.historyAverageReward\\n\\t\\t\\t.mul(historyLength)\\n\\t\\t\\t.sub(\\n\\t\\t\\t\\thistoryAverageRewardWhenEntered.mul(historyLengthBeforeStakerEntered)\\n\\t\\t\\t).div(blocksParticipatedInHistory);\\n\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the stake reward from history\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakingUnits = userStakes[stakeIndex].stakingUnits;\\n\\t\\tif (stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyAverageForStaker = getHistoryAverageForStaker(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn blocksParticipatedInHistory\\n\\t\\t\\t.mul(historyAverageForStaker)\\n\\t\\t\\t.mul(stakingUnits)\\n\\t\\t\\t.div(10 ** 18);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t*/\\n\\tfunction _addNftToStakeAndApplyMultiplier(\\n\\t\\taddress rarityRegister,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuint256 rewardMultiplier = INFTRarityRegister(rarityRegister).getNftRarity(tokenAddress, tokenId);\\n\\n\\t\\trequire(rewardMultiplier > 0, 'Staking: NFT not found in RarityRegister');\\n\\t\\trequire(rewardMultiplier >= 100, 'Staking: NFT multiplier must be at least 100');\\n\\t\\trequire(\\n\\t\\t\\tuserStake.userStakedToken.tokenAddress == address(0),\\n\\t\\t\\t'Staking: Stake already has a token'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuserStake.lockedTill > block.number,\\n\\t\\t\\t'Staking: cannot add NFT to unlocked stakes'\\n\\t\\t);\\n\\n\\n\\t\\tuint userStakingUnits = userStake.stakingUnits;\\n\\n\\t\\tbool success = TokenHelper.transferFrom(tokenAddress, tokenId, msg.sender, address(this));\\n\\n\\t\\trequire(success, \\\"Staking: could not add NFT to stake\\\");\\n\\n\\t\\tuserStake.userStakedToken.tokenAddress = tokenAddress;\\n\\t\\tuserStake.userStakedToken.tokenId = tokenId;\\n\\n\\t\\tuserStake.stakingUnits = applyPercent(userStakingUnits, rewardMultiplier);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The stake should exist\\n\\t* @dev when adding the NFT we need to simulate an untake/stake because we need to recalculate the\\n\\t* new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\\n\\t* @notice it MUST revert if the added token has no multiplier\\n\\t*/\\n\\tfunction addNftToStake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 previousStakingUnits = userStakes[stakeIndex].stakingUnits; // this stays the same\\n\\t\\trequire(previousStakingUnits > 0, \\\"Staking: Stake not found\\\");\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t_addNftToStakeAndApplyMultiplier(\\n\\t\\t\\tstakingInfo.rarityRegister,\\n\\t\\t\\tuserStakes[stakeIndex],\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\n\\t\\tuint256 newStakingUnits = userStakes[stakeIndex].stakingUnits; // after we just update it\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t// we bring the stake to the current time\\n\\t\\tuserStakes[stakeIndex].enteredAtBlock = block.number;\\n\\t\\tuserStakes[stakeIndex].historyAverageRewardWhenEntered = stakingInfo.historyAverageReward;\\n\\t\\tuserStakes[stakeIndex].rewardCredit = stakerReward;\\n\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits\\n\\t\\t\\t.sub(previousStakingUnits)\\n\\t\\t\\t.add(newStakingUnits);\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot.sub(stakerReward);\\n\\t}\\n\\n\\tfunction _resetStake(UserStake storage userStake) private {\\n\\t\\tuserStake.stakingUnits = 0;\\n\\t\\tuserStake.rewardCredit = 0;\\n\\t\\tuserStake.amountStaked = 0;\\n\\t\\tuserStake.enteredAtBlock = 0;\\n\\t\\tuserStake.lockedTill = 0;\\n\\t\\tuserStake.ticketsMintingRatioWhenEntered = 0;\\n\\t\\tuserStake.historyAverageRewardWhenEntered = 0;\\n\\t\\tuserStake.ticketsMintingChillPeriodWhenEntered = 0;\\n\\t}\\n\\n\\n\\t/**\\n\\t* @notice Remove the preveusly staked NFT from the stake\\n\\t* @param staker the address of the owner of the stake\\n\\t*/\\n\\tfunction removeNftFromStake(\\n\\t\\tUserStakedToken storage userStakedToken,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tif (userStakedToken.tokenAddress != address(0)) {\\n\\t\\t\\tuint256 tokenId = userStakedToken.tokenId;\\n\\t\\t\\taddress tokenAddress = userStakedToken.tokenAddress;\\n\\n\\t\\t\\tTokenHelper.transferFrom(tokenAddress, tokenId, address(this), staker);\\n\\t\\t}\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Allows user to unstake the staked tokens\\n\\t* @notice The tokens are allowed to be unstaked only after the lock duration has passed\\n\\t* @notice MUST trigger Unstaked event\\n\\t* @dev Unstaking tokens is an atomic operation\\u2014either all of the tokens in a stake, or none of the tokens.\\n\\t* @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\\n\\t*   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\\n\\t* @return uint256 The number of tokens unstaked\\n\\t*/\\n\\tfunction unstake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(stakeIndex < userStakes.length, 'Staking: Nothing to unstake');\\n\\n\\t\\trequire(userStakes[stakeIndex].lockedTill < block.number, \\\"Staking: Stake is still locked\\\");\\n\\t\\trequire(userStakes[stakeIndex].amountStaked != 0, 'Staking: Nothing to unstake');\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t// if for any reason the transfer fails, it will fail silently\\n\\t\\t// and token can be withdrawn when error disappears\\n\\t\\tremoveNftFromStake(userStakes[stakeIndex].userStakedToken, msg.sender);\\n\\n\\n\\t\\tuint256 totalAmount = stakerReward\\n\\t\\t\\t.add(userStakes[stakeIndex].amountStaked)\\n\\t\\t\\t.add(userStakes[stakeIndex].rewardCredit);\\n\\n\\t\\tTokenHelper.ERC20Transfer(rewardStreamInfo.rewardToken, address(msg.sender), totalAmount);\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\tstakingInfo.totalDistributedRewards = stakingInfo.totalDistributedRewards.add(stakerReward).add(userStakes[stakeIndex].rewardCredit);\\n\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked.sub(userStakes[stakeIndex].amountStaked);\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits.sub(userStakes[stakeIndex].stakingUnits);\\n\\n\\t\\tclaimTickets(stakingInfo.ticket, userStakes[stakeIndex], msg.sender);\\n\\t\\t_resetStake(userStakes[stakeIndex]);\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot.sub(stakerReward);\\n\\n\\t\\treturn stakerReward;\\n\\t}\\n\\n\\tfunction getClaimableTickets(\\n\\t\\tUserStake storage userStake\\n\\t)\\n\\t\\tpublic\\n\\t  view\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 stakingUnits = userStake.stakingUnits;\\n\\t\\tuint256 ticketsMintingChillPeriod = userStake.ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 ticketsMintingRatio = userStake.ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMinted = userStake.ticketsMinted;\\n\\n\\t\\tif(stakingUnits == 0 || ticketsMintingRatio == 0 || ticketsMintingChillPeriod == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// 2. get chilling period length\\n\\t\\t// 3. check how many periods have passed\\n\\t\\tuint256 enteredAtBlock = userStake.enteredAtBlock;\\n\\t\\tuint256 lockedTill = userStake.lockedTill;\\n\\t\\t// 4. prevent minting more tickets after stake is unlocked\\n\\n\\t\\tuint256 blocksDelta = Math.min(\\n\\t\\t\\t(uint256(block.number).sub(enteredAtBlock)),\\n\\t\\t\\t(lockedTill.sub(enteredAtBlock))\\n\\t\\t).add(ticketsMintingChillPeriod); // count as passed from day 0\\n\\t\\tuint256 periodsPassed = blocksDelta.div(ticketsMintingChillPeriod);\\n\\t\\t// 4. multiply tickets\\n\\t\\tuint256 multipliedUnits = stakingUnits.mul(periodsPassed);\\n\\t\\t// 5. get printable tickets\\n\\t\\tuint256 printableTickets = multipliedUnits.div(ticketsMintingRatio);\\n\\t\\t// 6. subtract any previously minted\\n\\t\\tuint256 netPrintableTickets = printableTickets.sub(ticketsMinted);\\n\\t\\t// 5. don't print more tickets after stake is unlocked\\n\\t\\treturn netPrintableTickets;\\n \\t}\\n\\n\\t/**\\n\\t* @notice Mint tickets to the staker\\n\\t* @notice The amount of tickets depends on the amount of tokens staked and the duration the tokens a locked for.\\n\\t* @param ticket the address of the ticket instance\\n\\t* @param userStake the stake to claim tickets from\\n\\t* @param staker the address fo the staker\\n\\t*/\\n\\tfunction claimTickets(\\n\\t\\taddress ticket,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 netPrintableTickets = getClaimableTickets(userStake);\\n\\n\\t\\tif(netPrintableTickets > 0) {\\n\\t\\t\\t \\n\\t\\t\\tTokenHelper._mintTickets(ticket, staker, netPrintableTickets);\\n\\t\\t\\tuserStake.ticketsMinted = userStake.ticketsMinted.add(netPrintableTickets);\\n\\t\\t}\\n \\t}\\n}\",\"keccak256\":\"0x6cde360b24e06487a48c4ae8ac30fc94fc0a7eb8b91918a79d3619ba48f06b24\",\"license\":\"MIT\"},\"contracts/Staking/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                (, bytes memory data) = token\\n                    .call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\\n\\n                return abi.decode(data, (address)) == address(this);\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n    }\\n}\",\"keccak256\":\"0xf6c8bcd2f81b9f551d69694149d66db1619f9663e334a679c42188f43933720d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061482c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c8063842e29811161019d578063c8fd6ed0116100e9578063f2fde38b116100a2578063f59cc39b1161007c578063f59cc39b14610946578063f7c618c114610964578063fa55df1814610982578063fc0c546a1461099e576102f1565b8063f2fde38b146108ca578063f3a35da1146108e6578063f4dadc6114610916576102f1565b8063c8fd6ed01461081e578063ca8df1101461083a578063cd459c8a14610856578063d91fe2ef14610874578063db53470514610892578063edac59f8146108ae576102f1565b80639fc41bb711610156578063ae0c6fd811610130578063ae0c6fd814610794578063b4db1720146107b2578063b5d5b5fa146107d2578063bf60f25714610802576102f1565b80639fc41bb71461072a578063a87df8321461075a578063aab9099e14610778576102f1565b8063842e298114610642578063892e7cfa146106725780638da5cb5b1461068e5780639189cdde146106ac57806399a9f1b5146106dc5780639f40bd63146106fa576102f1565b806352ceb0471161025c5780636d2196b51161021557806380dc439c116101ef57806380dc439c146105b8578063817b1cd2146105e857806382ccf18314610606578063839e794a14610624576102f1565b80636d2196b5146105725780637033e4a614610590578063715018a6146105ae576102f1565b806352ceb047146104ae5780635478f468146104ca5780635d003824146104e85780635df6fd1814610506578063682c3f55146105245780636c19b41c14610542576102f1565b806322178e8f116102ae57806322178e8f146103b65780632f43f4d1146103d25780634a0ef78b146103ee5780634b341aed1461041e5780635001c9bd1461044e57806352c4dc261461047e576102f1565b8063061886cd146102f657806309af60a7146103265780630e89439b146103445780630ef96356146103605780631c65c78b1461037c578063202bc5de14610398575b600080fd5b610310600480360381019061030b9190613923565b6109bc565b60405161031d9190614495565b60405180910390f35b61032e610b18565b60405161033b91906144d9565b60405180910390f35b61035e60048036038101906103599190613ac5565b610b25565b005b61037a600480360381019061037591906139c2565b610ca8565b005b61039660048036038101906103919190613818565b610e2c565b005b6103a0610eef565b6040516103ad919061405d565b60405180910390f35b6103d060048036038101906103cb9190613a2e565b610f1c565b005b6103ec60048036038101906103e79190613b59565b611168565b005b61040860048036038101906104039190613923565b6112bc565b60405161041591906144d9565b60405180910390f35b61043860048036038101906104339190613818565b611390565b60405161044591906144d9565b60405180910390f35b61046860048036038101906104639190613923565b61145e565b60405161047591906144d9565b60405180910390f35b61049860048036038101906104939190613923565b6115f7565b6040516104a591906144d9565b60405180910390f35b6104c860048036038101906104c39190613a73565b6116cf565b005b6104d261178f565b6040516104df91906144d9565b60405180910390f35b6104f061181e565b6040516104fd91906144d9565b60405180910390f35b61050e6118b6565b60405161051b91906144d9565b60405180910390f35b61052c6118c3565b60405161053991906144d9565b60405180910390f35b61055c60048036038101906105579190613923565b6118d0565b60405161056991906144d9565b60405180910390f35b61057a6119a7565b60405161058791906144d9565b60405180910390f35b6105986119b4565b6040516105a59190614101565b60405180910390f35b6105b66119b9565b005b6105d260048036038101906105cd9190613a73565b611a41565b6040516105df91906144d9565b60405180910390f35b6105f0611a92565b6040516105fd91906144d9565b60405180910390f35b61060e611a9f565b60405161061b91906144d9565b60405180910390f35b61062c611b2e565b60405161063991906144d9565b60405180910390f35b61065c60048036038101906106579190613818565b611b3b565b60405161066991906144d9565b60405180910390f35b61068c60048036038101906106879190613b1d565b611b87565b005b610696611cb5565b6040516106a3919061405d565b60405180910390f35b6106c660048036038101906106c19190613923565b611cdf565b6040516106d391906144d9565b60405180910390f35b6106e4611db3565b6040516106f191906144d9565b60405180910390f35b610714600480360381019061070f9190613923565b611dc0565b60405161072191906144d9565b60405180910390f35b610744600480360381019061073f9190613923565b611e94565b60405161075191906144d9565b60405180910390f35b610762611f68565b60405161076f91906144d9565b60405180910390f35b610792600480360381019061078d9190613b59565b611f75565b005b61079c612001565b6040516107a991906144d9565b60405180910390f35b6107ba61200e565b6040516107c9939291906144f4565b60405180910390f35b6107ec60048036038101906107e79190613923565b612046565b6040516107f9919061445e565b60405180910390f35b61081c6004803603810190610817919061395f565b61220e565b005b61083860048036038101906108339190613ac5565b6122c5565b005b610854600480360381019061084f9190613a73565b612522565b005b61085e6126bd565b60405161086b91906144d9565b60405180910390f35b61087c6126ca565b60405161088991906144d9565b60405180910390f35b6108ac60048036038101906108a79190613a73565b612762565b005b6108c860048036038101906108c39190613841565b612865565b005b6108e460048036038101906108df9190613818565b612a8b565b005b61090060048036038101906108fb9190613923565b612b83565b60405161090d91906144d9565b60405180910390f35b610930600480360381019061092b9190613a73565b612c5a565b60405161093d91906144d9565b60405180910390f35b61094e612cab565b60405161095b91906144d9565b60405180910390f35b61096c612d46565b604051610979919061405d565b60405180910390f35b61099c60048036038101906109979190613818565b612d73565b005b6109a6612e6d565b6040516109b3919061405d565b60405180910390f35b6109c4613606565b6109cc613606565b82607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011610a1b5780610b0f565b607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016009016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250505b91505092915050565b6000606960030154905090565b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863e6c8af4b60656069607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020338888886040518863ffffffff1660e01b8152600401610ba89796959493929190614249565b60006040518083038186803b158015610bc057600080fd5b505af4158015610bd4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f16093514284606960040154610c6d6001607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612e9a90919063ffffffff16565b604051602001610c7d9190614042565b604051602081830303815290604052604051610c9b9392919061452b565b60405180910390a2505050565b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863e6c8af4b60656069607660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020888888886040518863ffffffff1660e01b8152600401610d2b9796959493929190614249565b60006040518083038186803b158015610d4357600080fd5b505af4158015610d57573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f16093514284606960040154610df06001607660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612e9a90919063ffffffff16565b604051602001610e009190614042565b604051602081830303815290604052604051610e1e9392919061452b565b60405180910390a250505050565b610e34612eb0565b73ffffffffffffffffffffffffffffffffffffffff16610e52611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f906141e0565b60405180910390fd5b806069600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006069600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8637bc0bc9284846040518363ffffffff1660e01b8152600401610f5792919061411c565b60206040518083038186803b158015610f6f57600080fd5b505af4158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa79190613a9c565b905043607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611021577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016006015410611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90614140565b60405180910390fd5b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863dd218078607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611104577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600901336040518363ffffffff1660e01b81526004016111339291906144b0565b60006040518083038186803b15801561114b57600080fd5b505af415801561115f573d6000803e3d6000fd5b50505050505050565b611170612eb0565b73ffffffffffffffffffffffffffffffffffffffff1661118e611cb5565b73ffffffffffffffffffffffffffffffffffffffff16146111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db906141e0565b60405180910390fd5b8160696007018481548110611222577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550806069600801848154811061126e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055507fb6bf12d706559fbee13bb278c735a72b00d839867b2b1a1d982ebf47babc09278383836040516112af93929190614569565b60405180910390a1505050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8638f3b32786069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611338939291906143f0565b60206040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613a9c565b905092915050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8639ac9e04a607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518263ffffffff1660e01b815260040161140791906140af565b60206040518083038186803b15801561141f57600080fd5b505af4158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190613a9c565b9050919050565b600081607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90614200565b60405180910390fd5b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8637946fbde607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110611575577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016040518263ffffffff1660e01b815260040161159f919061447a565b60206040518083038186803b1580156115b757600080fd5b505af41580156115cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ef9190613a9c565b905092915050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8639c2cbc8d607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846069600501546040518463ffffffff1660e01b8152600401611677939291906140ca565b60206040518083038186803b15801561168f57600080fd5b505af41580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190613a9c565b905092915050565b6116d7612eb0565b73ffffffffffffffffffffffffffffffffffffffff166116f5611cb5565b73ffffffffffffffffffffffffffffffffffffffff161461174b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611742906141e0565b60405180910390fd5b806069600901819055507f7a452c2a10e8d62d109ecca1814d427d1cc00b6f7f4c33210dec6b37a3807f0f8160405161178491906144d9565b60405180910390a150565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8631388950060696040518263ffffffff1660e01b81526004016117c991906143d5565b60206040518083038186803b1580156117e157600080fd5b505af41580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190613a9c565b905090565b600073Fa4EAb7B53B3530Ea1DdC871B1c02D3dB13d862563c02ceb0a6065606960000154436040518463ffffffff1660e01b815260040161186193929190614359565b60206040518083038186803b15801561187957600080fd5b505af415801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190613a9c565b905090565b60006069600a0154905090565b6000606960040154905090565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8637a54ff4160656069607660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020866040518563ffffffff1660e01b815260040161194f94939291906142b3565b60206040518083038186803b15801561196757600080fd5b505af415801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199f9190613a9c565b905092915050565b6000606960090154905090565b600090565b6119c1612eb0565b73ffffffffffffffffffffffffffffffffffffffff166119df611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2c906141e0565b60405180910390fd5b611a3f6000612eb8565b565b600060696008018281548110611a80577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000606960040154905090565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8631dccbf8760696040518263ffffffff1660e01b8152600401611ad991906143d5565b60206040518083038186803b158015611af157600080fd5b505af4158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190613a9c565b905090565b6000606960010154905090565b6000607660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b611b8f612eb0565b73ffffffffffffffffffffffffffffffffffffffff16611bad611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa906141e0565b60405180910390fd5b606960070182908060018154018082558091505060019003906000526020600020016000909190919091505560696008018190806001815401808255809150506001900390600052602060002001600090919091909150557fb6bf12d706559fbee13bb278c735a72b00d839867b2b1a1d982ebf47babc0927611c986001606960070180549050612e9a90919063ffffffff16565b8383604051611ca993929190614569565b60405180910390a15050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863d85b41f66069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611d5b939291906143f0565b60206040518083038186803b158015611d7357600080fd5b505af4158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab9190613a9c565b905092915050565b6000606960050154905090565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863ca72a6fd6069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611e3c939291906143f0565b60206040518083038186803b158015611e5457600080fd5b505af4158015611e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8c9190613a9c565b905092915050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863607082a36069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611f10939291906143f0565b60206040518083038186803b158015611f2857600080fd5b505af4158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f609190613a9c565b905092915050565b6000606960060154905090565b611f7d612eb0565b73ffffffffffffffffffffffffffffffffffffffff16611f9b611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe8906141e0565b60405180910390fd5b611ffc838383612f7e565b505050565b6000606960020154905090565b60658060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b61204e613636565b612056613636565b82607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116120a55780612205565b607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061211c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250505b91505092915050565b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863e64a80e860656069607660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208787876040518763ffffffff1660e01b815260040161228f969594939291906142f8565b60006040518083038186803b1580156122a757600080fd5b505af41580156122bb573d6000803e3d6000fd5b5050505050505050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C863fd9d95ce60656069607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8637bc0bc9289896040518363ffffffff1660e01b815260040161235d92919061411c565b60206040518083038186803b15801561237557600080fd5b505af4158015612389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ad9190613a9c565b6040518563ffffffff1660e01b81526004016123cc94939291906142b3565b60206040518083038186803b1580156123e457600080fd5b505af41580156123f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241c9190613a9c565b90503373ffffffffffffffffffffffffffffffffffffffff167faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87548260696004015473cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8637bc0bc9288886040518363ffffffff1660e01b815260040161249692919061411c565b60206040518083038186803b1580156124ae57600080fd5b505af41580156124c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e69190613a9c565b6040516020016124f69190614042565b6040516020818303038152906040526040516125149392919061452b565b60405180910390a250505050565b80607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116125a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259d90614200565b60405180910390fd5b73cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8639e5236506069600b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061265d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201336040518463ffffffff1660e01b815260040161268a93929190614078565b60006040518083038186803b1580156126a257600080fd5b505af41580156126b6573d6000803e3d6000fd5b5050505050565b6000606960000154905090565b600073Fa4EAb7B53B3530Ea1DdC871B1c02D3dB13d862563c02ceb0a6065606960010154436040518463ffffffff1660e01b815260040161270d93929190614359565b60206040518083038186803b15801561272557600080fd5b505af4158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190613a9c565b905090565b61276a612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612788611cb5565b73ffffffffffffffffffffffffffffffffffffffff16146127de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d5906141e0565b60405180910390fd5b60008111612821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281890614180565b60405180910390fd5b806069600a01819055507ff1f5ae77540b6589b1d7d2229d1090fe3218df85d839b22034e4204ebec02b808160405161285a91906144d9565b60405180910390a150565b600060019054906101000a900460ff168061288b575060008054906101000a900460ff16155b6128ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c1906141c0565b60405180910390fd5b60008060019054906101000a900460ff16159050801561291a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b855187511461295e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612955906141a0565b60405180910390fd5b612966613050565b61296f89613139565b61299782670de0b6b3a76400006129906001436131a690919063ffffffff16565b60006131bc565b6129b7670de0b6b3a76400006069600501546131a690919063ffffffff16565b6069600501819055506129e0670de0b6b3a76400006069600401546131a690919063ffffffff16565b6069600401819055508660696007019080519060200190612a0292919061368f565b508560696008019080519060200190612a1c92919061368f565b504360696000018190555043606960010181905550612a3a84612762565b612a43856116cf565b612a4c88610e2c565b612a5583612d73565b436065600201819055508015612a805760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b612a93612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612ab1611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614612b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afe906141e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6e90614160565b60405180910390fd5b612b8081612eb8565b50565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C86355facecf60656069607660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020866040518563ffffffff1660e01b8152600401612c0294939291906142b3565b60206040518083038186803b158015612c1a57600080fd5b505af4158015612c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c529190613a9c565b905092915050565b600060696007018281548110612c99577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600073cBE5ee787d60CfA0dde84F8cfb677827A11dd7C8638714b7676069612cd16126ca565b60006040518463ffffffff1660e01b8152600401612cf193929190614427565b60206040518083038186803b158015612d0957600080fd5b505af4158015612d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d419190613a9c565b905090565b6000606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612d7b612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612d99611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614612def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de6906141e0565b60405180910390fd5b806069600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc18194c6c34249ab46b40f342dc0b94dc875bfb79a6078e7e97a265b280c86c581604051612e62919061405d565b60405180910390a150565b6000606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008183612ea89190614691565b905092915050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073Fa4EAb7B53B3530Ea1DdC871B1c02D3dB13d862563b9718d4260658686866040518563ffffffff1660e01b8152600401612fbe9493929190614390565b60206040518083038186803b158015612fd657600080fd5b505af4158015612fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300e9190613a9c565b90507eea3fed021bf73e9d965a834bae8937340da031a31743fc4b6dc656a78fcc0583838360405161304293929190614569565b60405180910390a150505050565b600060019054906101000a900460ff1680613076575060008054906101000a900460ff16155b6130b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ac906141c0565b60405180910390fd5b60008060019054906101000a900460ff161590508015613105576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61310d613444565b61311561351d565b80156131365760008060016101000a81548160ff0219169083151502179055505b50565b73Fa4EAb7B53B3530Ea1DdC871B1c02D3dB13d862563973ccf5b6065836040518363ffffffff1660e01b8152600401613173929190614220565b60006040518083038186803b15801561318b57600080fd5b505af415801561319f573d6000803e3d6000fd5b5050505050565b600081836131b4919061463b565b905092915050565b607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101400160405280858152602001858152602001848152602001606960020154815260200160696009015481526020016069600a0154815260200161324d84866131a690919063ffffffff16565b815260200160008152602001600081526020016040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525081525090806001815401808255809150506001900390600052602060002090600b0201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050508373ffffffffffffffffffffffffffffffffffffffff167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f160935142846069600401546134086001607660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612e9a90919063ffffffff16565b6040516020016134189190614042565b6040516020818303038152906040526040516134369392919061452b565b60405180910390a250505050565b600060019054906101000a900460ff168061346a575060008054906101000a900460ff16155b6134a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134a0906141c0565b60405180910390fd5b60008060019054906101000a900460ff1615905080156134f9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561351a5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680613543575060008054906101000a900460ff16155b613582576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613579906141c0565b60405180910390fd5b60008060019054906101000a900460ff1615905080156135d2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6135e26135dd612eb0565b612eb8565b80156136035760008060016101000a81548160ff0219169083151502179055505b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001613689613606565b81525090565b8280548282559060005260206000209081019282156136cb579160200282015b828111156136ca5782518255916020019190600101906136af565b5b5090506136d891906136dc565b5090565b5b808211156136f55760008160009055506001016136dd565b5090565b600061370c613707846145d1565b6145a0565b9050808382526020820190508285602086028201111561372b57600080fd5b60005b8581101561375b578161374188826137ee565b84526020840193506020830192505060018101905061372e565b5050509392505050565b600081359050613774816147c8565b92915050565b600082601f83011261378b57600080fd5b813561379b8482602086016136f9565b91505092915050565b60008083601f8401126137b657600080fd5b8235905067ffffffffffffffff8111156137cf57600080fd5b6020830191508360018202830111156137e757600080fd5b9250929050565b6000813590506137fd816147df565b92915050565b600081519050613812816147df565b92915050565b60006020828403121561382a57600080fd5b600061383884828501613765565b91505092915050565b600080600080600080600080610100898b03121561385e57600080fd5b600061386c8b828c01613765565b985050602061387d8b828c01613765565b975050604089013567ffffffffffffffff81111561389a57600080fd5b6138a68b828c0161377a565b965050606089013567ffffffffffffffff8111156138c357600080fd5b6138cf8b828c0161377a565b95505060806138e08b828c016137ee565b94505060a06138f18b828c016137ee565b93505060c06139028b828c01613765565b92505060e06139138b828c01613765565b9150509295985092959890939650565b6000806040838503121561393657600080fd5b600061394485828601613765565b9250506020613955858286016137ee565b9150509250929050565b6000806000806080858703121561397557600080fd5b600061398387828801613765565b9450506020613994878288016137ee565b93505060406139a587828801613765565b92505060606139b6878288016137ee565b91505092959194509250565b600080600080606085870312156139d857600080fd5b60006139e687828801613765565b94505060206139f7878288016137ee565b935050604085013567ffffffffffffffff811115613a1457600080fd5b613a20878288016137a4565b925092505092959194509250565b60008060208385031215613a4157600080fd5b600083013567ffffffffffffffff811115613a5b57600080fd5b613a67858286016137a4565b92509250509250929050565b600060208284031215613a8557600080fd5b6000613a93848285016137ee565b91505092915050565b600060208284031215613aae57600080fd5b6000613abc84828501613803565b91505092915050565b600080600060408486031215613ada57600080fd5b6000613ae8868287016137ee565b935050602084013567ffffffffffffffff811115613b0557600080fd5b613b11868287016137a4565b92509250509250925092565b60008060408385031215613b3057600080fd5b6000613b3e858286016137ee565b9250506020613b4f858286016137ee565b9150509250929050565b600080600060608486031215613b6e57600080fd5b6000613b7c868287016137ee565b9350506020613b8d868287016137ee565b9250506040613b9e868287016137ee565b9150509250925092565b613bb1816146c5565b82525050565b613bc0816146c5565b82525050565b613bcf816146c5565b82525050565b8082525050565b613be5816146d7565b82525050565b613bf4816146d7565b82525050565b6000613c068385614619565b9350613c1383858461470d565b613c1c836147b7565b840190509392505050565b6000613c32826145fd565b613c3c8185614608565b9350613c4c81856020860161471c565b613c55816147b7565b840191505092915050565b6000613c6d601e8361462a565b91507f5374616b696e673a205374616b65206973207374696c6c206c6f636b656400006000830152602082019050919050565b6000613cad60268361462a565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d1360308361462a565b91507f5374616b696e673a207469636b6574734d696e74696e674368696c6c5065726960008301527f6f642063616e2774206265207a65726f000000000000000000000000000000006020830152604082019050919050565b6000613d79603b8361462a565b91507f5374616b653a206c6f636b206d756c7469706c6965722073686f756c6420686160008301527f7665207468652073616d65206c656e677468206164206c6f636b7300000000006020830152604082019050919050565b6000613ddf602e8361462a565b91507f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008301527f647920696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b6000613e4560208361462a565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613e85601d8361462a565b91507f5374616b696e673a207374616b6520646f6573206e6f742065786973740000006000830152602082019050919050565b8082525050565b8082525050565b61016082016000820151613edd6000850182613ffe565b506020820151613ef06020850182613ffe565b506040820151613f036040850182613ffe565b506060820151613f166060850182613ffe565b506080820151613f296080850182613ffe565b5060a0820151613f3c60a0850182613ffe565b5060c0820151613f4f60c0850182613ffe565b5060e0820151613f6260e0850182613ffe565b50610100820151613f77610100850182613ffe565b50610120820151613f8c610120850182613f99565b50505050565b8082525050565b604082016000820151613faf6000850182613ba8565b506020820151613fc26020850182613ffe565b50505050565b604082016000820151613fde6000850182613ba8565b506020820151613ff16020850182613ffe565b50505050565b8082525050565b61400781614703565b82525050565b61401681614703565b82525050565b61402581614703565b82525050565b61403c61403782614703565b61474f565b82525050565b600061404e828461402b565b60208201915081905092915050565b60006020820190506140726000830184613bb7565b92915050565b600060608201905061408d6000830186613bc6565b61409a6020830185613f92565b6140a76040830184613bc6565b949350505050565b60006020820190506140c46000830184613bd5565b92915050565b60006060820190506140df6000830186613bd5565b6140ec602083018561401c565b6140f9604083018461401c565b949350505050565b60006020820190506141166000830184613bdc565b92915050565b60006020820190508181036000830152614137818486613bfa565b90509392505050565b6000602082019050818103600083015261415981613c60565b9050919050565b6000602082019050818103600083015261417981613ca0565b9050919050565b6000602082019050818103600083015261419981613d06565b9050919050565b600060208201905081810360008301526141b981613d6c565b9050919050565b600060208201905081810360008301526141d981613dd2565b9050919050565b600060208201905081810360008301526141f981613e38565b9050919050565b6000602082019050818103600083015261421981613e78565b9050919050565b60006040820190506142356000830185613eb8565b6142426020830184613bc6565b9392505050565b600060c08201905061425e600083018a613eb8565b61426b6020830189613ebf565b6142786040830188613bd5565b6142856060830187613bc6565b614292608083018661401c565b81810360a08301526142a5818486613bfa565b905098975050505050505050565b60006080820190506142c86000830187613eb8565b6142d56020830186613ebf565b6142e26040830185613bd5565b6142ef606083018461401c565b95945050505050565b600060c08201905061430d6000830189613eb8565b61431a6020830188613ebf565b6143276040830187613bd5565b614334606083018661401c565b6143416080830185613bc6565b61434e60a083018461401c565b979650505050505050565b600060608201905061436e6000830186613eb8565b61437b602083018561401c565b614388604083018461401c565b949350505050565b60006080820190506143a56000830187613eb8565b6143b2602083018661401c565b6143bf604083018561401c565b6143cc606083018461401c565b95945050505050565b60006020820190506143ea6000830184613ebf565b92915050565b60006060820190506144056000830186613ebf565b6144126020830185613bd5565b61441f604083018461401c565b949350505050565b600060608201905061443c6000830186613ebf565b614449602083018561401c565b6144566040830184613beb565b949350505050565b6000610160820190506144746000830184613ec6565b92915050565b600060208201905061448f6000830184613f92565b92915050565b60006040820190506144aa6000830184613fc8565b92915050565b60006040820190506144c56000830185613ff7565b6144d26020830184613bc6565b9392505050565b60006020820190506144ee600083018461400d565b92915050565b6000606082019050614509600083018661400d565b614516602083018561400d565b6145236040830184613bb7565b949350505050565b6000606082019050614540600083018661400d565b61454d602083018561400d565b818103604083015261455f8184613c27565b9050949350505050565b600060608201905061457e600083018661400d565b61458b602083018561400d565b614598604083018461400d565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156145c7576145c6614788565b5b8060405250919050565b600067ffffffffffffffff8211156145ec576145eb614788565b5b602082029050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061464682614703565b915061465183614703565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561468657614685614759565b5b828201905092915050565b600061469c82614703565b91506146a783614703565b9250828210156146ba576146b9614759565b5b828203905092915050565b60006146d0826146e3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561473a57808201518184015260208101905061471f565b83811115614749576000848401525b50505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6147d1816146c5565b81146147dc57600080fd5b50565b6147e881614703565b81146147f357600080fd5b5056fea26469706673582212200cbca98b946c164697aaf5b5685b9511ccc227fedac387d649760c46be60690a64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c8063842e29811161019d578063c8fd6ed0116100e9578063f2fde38b116100a2578063f59cc39b1161007c578063f59cc39b14610946578063f7c618c114610964578063fa55df1814610982578063fc0c546a1461099e576102f1565b8063f2fde38b146108ca578063f3a35da1146108e6578063f4dadc6114610916576102f1565b8063c8fd6ed01461081e578063ca8df1101461083a578063cd459c8a14610856578063d91fe2ef14610874578063db53470514610892578063edac59f8146108ae576102f1565b80639fc41bb711610156578063ae0c6fd811610130578063ae0c6fd814610794578063b4db1720146107b2578063b5d5b5fa146107d2578063bf60f25714610802576102f1565b80639fc41bb71461072a578063a87df8321461075a578063aab9099e14610778576102f1565b8063842e298114610642578063892e7cfa146106725780638da5cb5b1461068e5780639189cdde146106ac57806399a9f1b5146106dc5780639f40bd63146106fa576102f1565b806352ceb0471161025c5780636d2196b51161021557806380dc439c116101ef57806380dc439c146105b8578063817b1cd2146105e857806382ccf18314610606578063839e794a14610624576102f1565b80636d2196b5146105725780637033e4a614610590578063715018a6146105ae576102f1565b806352ceb047146104ae5780635478f468146104ca5780635d003824146104e85780635df6fd1814610506578063682c3f55146105245780636c19b41c14610542576102f1565b806322178e8f116102ae57806322178e8f146103b65780632f43f4d1146103d25780634a0ef78b146103ee5780634b341aed1461041e5780635001c9bd1461044e57806352c4dc261461047e576102f1565b8063061886cd146102f657806309af60a7146103265780630e89439b146103445780630ef96356146103605780631c65c78b1461037c578063202bc5de14610398575b600080fd5b610310600480360381019061030b9190613923565b6109bc565b60405161031d9190614495565b60405180910390f35b61032e610b18565b60405161033b91906144d9565b60405180910390f35b61035e60048036038101906103599190613ac5565b610b25565b005b61037a600480360381019061037591906139c2565b610ca8565b005b61039660048036038101906103919190613818565b610e2c565b005b6103a0610eef565b6040516103ad919061405d565b60405180910390f35b6103d060048036038101906103cb9190613a2e565b610f1c565b005b6103ec60048036038101906103e79190613b59565b611168565b005b61040860048036038101906104039190613923565b6112bc565b60405161041591906144d9565b60405180910390f35b61043860048036038101906104339190613818565b611390565b60405161044591906144d9565b60405180910390f35b61046860048036038101906104639190613923565b61145e565b60405161047591906144d9565b60405180910390f35b61049860048036038101906104939190613923565b6115f7565b6040516104a591906144d9565b60405180910390f35b6104c860048036038101906104c39190613a73565b6116cf565b005b6104d261178f565b6040516104df91906144d9565b60405180910390f35b6104f061181e565b6040516104fd91906144d9565b60405180910390f35b61050e6118b6565b60405161051b91906144d9565b60405180910390f35b61052c6118c3565b60405161053991906144d9565b60405180910390f35b61055c60048036038101906105579190613923565b6118d0565b60405161056991906144d9565b60405180910390f35b61057a6119a7565b60405161058791906144d9565b60405180910390f35b6105986119b4565b6040516105a59190614101565b60405180910390f35b6105b66119b9565b005b6105d260048036038101906105cd9190613a73565b611a41565b6040516105df91906144d9565b60405180910390f35b6105f0611a92565b6040516105fd91906144d9565b60405180910390f35b61060e611a9f565b60405161061b91906144d9565b60405180910390f35b61062c611b2e565b60405161063991906144d9565b60405180910390f35b61065c60048036038101906106579190613818565b611b3b565b60405161066991906144d9565b60405180910390f35b61068c60048036038101906106879190613b1d565b611b87565b005b610696611cb5565b6040516106a3919061405d565b60405180910390f35b6106c660048036038101906106c19190613923565b611cdf565b6040516106d391906144d9565b60405180910390f35b6106e4611db3565b6040516106f191906144d9565b60405180910390f35b610714600480360381019061070f9190613923565b611dc0565b60405161072191906144d9565b60405180910390f35b610744600480360381019061073f9190613923565b611e94565b60405161075191906144d9565b60405180910390f35b610762611f68565b60405161076f91906144d9565b60405180910390f35b610792600480360381019061078d9190613b59565b611f75565b005b61079c612001565b6040516107a991906144d9565b60405180910390f35b6107ba61200e565b6040516107c9939291906144f4565b60405180910390f35b6107ec60048036038101906107e79190613923565b612046565b6040516107f9919061445e565b60405180910390f35b61081c6004803603810190610817919061395f565b61220e565b005b61083860048036038101906108339190613ac5565b6122c5565b005b610854600480360381019061084f9190613a73565b612522565b005b61085e6126bd565b60405161086b91906144d9565b60405180910390f35b61087c6126ca565b60405161088991906144d9565b60405180910390f35b6108ac60048036038101906108a79190613a73565b612762565b005b6108c860048036038101906108c39190613841565b612865565b005b6108e460048036038101906108df9190613818565b612a8b565b005b61090060048036038101906108fb9190613923565b612b83565b60405161090d91906144d9565b60405180910390f35b610930600480360381019061092b9190613a73565b612c5a565b60405161093d91906144d9565b60405180910390f35b61094e612cab565b60405161095b91906144d9565b60405180910390f35b61096c612d46565b604051610979919061405d565b60405180910390f35b61099c60048036038101906109979190613818565b612d73565b005b6109a6612e6d565b6040516109b3919061405d565b60405180910390f35b6109c4613606565b6109cc613606565b82607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011610a1b5780610b0f565b607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016009016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250505b91505092915050565b6000606960030154905090565b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63e6c8af4b60656069607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020338888886040518863ffffffff1660e01b8152600401610ba89796959493929190614249565b60006040518083038186803b158015610bc057600080fd5b505af4158015610bd4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f16093514284606960040154610c6d6001607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612e9a90919063ffffffff16565b604051602001610c7d9190614042565b604051602081830303815290604052604051610c9b9392919061452b565b60405180910390a2505050565b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63e6c8af4b60656069607660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020888888886040518863ffffffff1660e01b8152600401610d2b9796959493929190614249565b60006040518083038186803b158015610d4357600080fd5b505af4158015610d57573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc65e53b88159e7d2c0fc12a0600072e28ae53ff73b4c1715369c30f16093514284606960040154610df06001607660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612e9a90919063ffffffff16565b604051602001610e009190614042565b604051602081830303815290604052604051610e1e9392919061452b565b60405180910390a250505050565b610e34612eb0565b73ffffffffffffffffffffffffffffffffffffffff16610e52611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f906141e0565b60405180910390fd5b806069600b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006069600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__637bc0bc9284846040518363ffffffff1660e01b8152600401610f5792919061411c565b60206040518083038186803b158015610f6f57600080fd5b505af4158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa79190613a9c565b905043607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611021577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016006015410611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90614140565b60405180910390fd5b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63dd218078607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611104577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600901336040518363ffffffff1660e01b81526004016111339291906144b0565b60006040518083038186803b15801561114b57600080fd5b505af415801561115f573d6000803e3d6000fd5b50505050505050565b611170612eb0565b73ffffffffffffffffffffffffffffffffffffffff1661118e611cb5565b73ffffffffffffffffffffffffffffffffffffffff16146111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db906141e0565b60405180910390fd5b8160696007018481548110611222577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550806069600801848154811061126e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055507fb6bf12d706559fbee13bb278c735a72b00d839867b2b1a1d982ebf47babc09278383836040516112af93929190614569565b60405180910390a1505050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__638f3b32786069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611338939291906143f0565b60206040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113889190613a9c565b905092915050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__639ac9e04a607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518263ffffffff1660e01b815260040161140791906140af565b60206040518083038186803b15801561141f57600080fd5b505af4158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190613a9c565b9050919050565b600081607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90614200565b60405180910390fd5b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__637946fbde607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110611575577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016040518263ffffffff1660e01b815260040161159f919061447a565b60206040518083038186803b1580156115b757600080fd5b505af41580156115cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ef9190613a9c565b905092915050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__639c2cbc8d607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846069600501546040518463ffffffff1660e01b8152600401611677939291906140ca565b60206040518083038186803b15801561168f57600080fd5b505af41580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190613a9c565b905092915050565b6116d7612eb0565b73ffffffffffffffffffffffffffffffffffffffff166116f5611cb5565b73ffffffffffffffffffffffffffffffffffffffff161461174b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611742906141e0565b60405180910390fd5b806069600901819055507f7a452c2a10e8d62d109ecca1814d427d1cc00b6f7f4c33210dec6b37a3807f0f8160405161178491906144d9565b60405180910390a150565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__631388950060696040518263ffffffff1660e01b81526004016117c991906143d5565b60206040518083038186803b1580156117e157600080fd5b505af41580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190613a9c565b905090565b600073__$8a1be47e59849b3a56075319f035db0fe2$__63c02ceb0a6065606960000154436040518463ffffffff1660e01b815260040161186193929190614359565b60206040518083038186803b15801561187957600080fd5b505af415801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b19190613a9c565b905090565b60006069600a0154905090565b6000606960040154905090565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__637a54ff4160656069607660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020866040518563ffffffff1660e01b815260040161194f94939291906142b3565b60206040518083038186803b15801561196757600080fd5b505af415801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199f9190613a9c565b905092915050565b6000606960090154905090565b600090565b6119c1612eb0565b73ffffffffffffffffffffffffffffffffffffffff166119df611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2c906141e0565b60405180910390fd5b611a3f6000612eb8565b565b600060696008018281548110611a80577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000606960040154905090565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__631dccbf8760696040518263ffffffff1660e01b8152600401611ad991906143d5565b60206040518083038186803b158015611af157600080fd5b505af4158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190613a9c565b905090565b6000606960010154905090565b6000607660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b611b8f612eb0565b73ffffffffffffffffffffffffffffffffffffffff16611bad611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa906141e0565b60405180910390fd5b606960070182908060018154018082558091505060019003906000526020600020016000909190919091505560696008018190806001815401808255809150506001900390600052602060002001600090919091909150557fb6bf12d706559fbee13bb278c735a72b00d839867b2b1a1d982ebf47babc0927611c986001606960070180549050612e9a90919063ffffffff16565b8383604051611ca993929190614569565b60405180910390a15050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63d85b41f66069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611d5b939291906143f0565b60206040518083038186803b158015611d7357600080fd5b505af4158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab9190613a9c565b905092915050565b6000606960050154905090565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63ca72a6fd6069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611e3c939291906143f0565b60206040518083038186803b158015611e5457600080fd5b505af4158015611e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8c9190613a9c565b905092915050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63607082a36069607660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020856040518463ffffffff1660e01b8152600401611f10939291906143f0565b60206040518083038186803b158015611f2857600080fd5b505af4158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f609190613a9c565b905092915050565b6000606960060154905090565b611f7d612eb0565b73ffffffffffffffffffffffffffffffffffffffff16611f9b611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614611ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe8906141e0565b60405180910390fd5b611ffc838383612f7e565b505050565b6000606960020154905090565b60658060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b61204e613636565b612056613636565b82607660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116120a55780612205565b607660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061211c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250505b91505092915050565b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63e64a80e860656069607660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208787876040518763ffffffff1660e01b815260040161228f969594939291906142f8565b60006040518083038186803b1580156122a757600080fd5b505af41580156122bb573d6000803e3d6000fd5b5050505050505050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__63fd9d95ce60656069607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__637bc0bc9289896040518363ffffffff1660e01b815260040161235d92919061411c565b60206040518083038186803b15801561237557600080fd5b505af4158015612389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ad9190613a9c565b6040518563ffffffff1660e01b81526004016123cc94939291906142b3565b60206040518083038186803b1580156123e457600080fd5b505af41580156123f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241c9190613a9c565b90503373ffffffffffffffffffffffffffffffffffffffff167faf01bfc8475df280aca00b578c4a948e6d95700f0db8c13365240f7f973c87548260696004015473__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__637bc0bc9288886040518363ffffffff1660e01b815260040161249692919061411c565b60206040518083038186803b1580156124ae57600080fd5b505af41580156124c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e69190613a9c565b6040516020016124f69190614042565b6040516020818303038152906040526040516125149392919061452b565b60405180910390a250505050565b80607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050116125a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259d90614200565b60405180910390fd5b73__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__639e5236506069600b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16607660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811061265d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201336040518463ffffffff1660e01b815260040161268a93929190614078565b60006040518083038186803b1580156126a257600080fd5b505af41580156126b6573d6000803e3d6000fd5b5050505050565b6000606960000154905090565b600073__$8a1be47e59849b3a56075319f035db0fe2$__63c02ceb0a6065606960010154436040518463ffffffff1660e01b815260040161270d93929190614359565b60206040518083038186803b15801561272557600080fd5b505af4158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190613a9c565b905090565b61276a612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612788611cb5565b73ffffffffffffffffffffffffffffffffffffffff16146127de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d5906141e0565b60405180910390fd5b60008111612821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281890614180565b60405180910390fd5b806069600a01819055507ff1f5ae77540b6589b1d7d2229d1090fe3218df85d839b22034e4204ebec02b808160405161285a91906144d9565b60405180910390a150565b600060019054906101000a900460ff168061288b575060008054906101000a900460ff16155b6128ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c1906141c0565b60405180910390fd5b60008060019054906101000a900460ff16159050801561291a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b855187511461295e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612955906141a0565b60405180910390fd5b612966613050565b61296f89613139565b61299782670de0b6b3a76400006129906001436131a690919063ffffffff16565b60006131bc565b6129b7670de0b6b3a76400006069600501546131a690919063ffffffff16565b6069600501819055506129e0670de0b6b3a76400006069600401546131a690919063ffffffff16565b6069600401819055508660696007019080519060200190612a0292919061368f565b508560696008019080519060200190612a1c92919061368f565b504360696000018190555043606960010181905550612a3a84612762565b612a43856116cf565b612a4c88610e2c565b612a5583612d73565b436065600201819055508015612a805760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b612a93612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612ab1611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614612b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afe906141e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6e90614160565b60405180910390fd5b612b8081612eb8565b50565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__6355facecf60656069607660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020866040518563ffffffff1660e01b8152600401612c0294939291906142b3565b60206040518083038186803b158015612c1a57600080fd5b505af4158015612c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c529190613a9c565b905092915050565b600060696007018281548110612c99577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600073__$16107f05d8fa5d4ffb36ab8866f0e3fbf5$__638714b7676069612cd16126ca565b60006040518463ffffffff1660e01b8152600401612cf193929190614427565b60206040518083038186803b158015612d0957600080fd5b505af4158015612d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d419190613a9c565b905090565b6000606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612d7b612eb0565b73ffffffffffffffffffffffffffffffffffffffff16612d99611cb5565b73ffffffffffffffffffffffffffffffffffffffff1614612def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de6906141e0565b60405180910390fd5b806069600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc18194c6c34249ab46b40f342dc0b94dc875bfb79a6078e7e97a265b280c86c581604051612e62919061405d565b60405180910390a150565b6000606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008183612ea89190614691565b905092915050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073__$8a1be47e59849b3a56075319f035db0fe2$__63b9718d4260658686866040518563ffffffff1660e01b8152600401612fbe9493929190614390565b60206040518083038186803b158015612fd657600080fd5b505af4158015612fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300e9190613a9c565b90507eea3fed021bf73e9d965a834bae8937340da031a31743fc4b6dc656a78fcc0583838360405161304293929190614569565b60405180910390a150505050565b600060019054906101000a900460ff1680613076575060008054906101000a900460ff16155b6130b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ac906141c0565b60405180910390fd5b60008060019054906101000a900460ff161590508015613105576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61310d613444565b61311561351d565b80156131365760008060016101000a81548160ff0219169083151502179055505b50565b73__$8a1be47e59849b3a56075319f035db0fe2$",
  "libraries": {
    "StakingLib": "0xcBE5ee787d60CfA0dde84F8cfb677827A11dd7C8",
    "RewardStreamerLib": "0xFa4EAb7B53B3530Ea1DdC871B1c02D3dB13d8625"
  },
  "devdoc": {
    "author": "@author Gilbert Kim @gilbertk422",
    "kind": "dev",
    "methods": {
      "addLockDuration(uint256,uint256)": {
        "params": {
          "lockNumber": "the new lock duration value"
        }
      },
      "addNftToStake(address,uint256,address,uint256)": {
        "details": "The stake should existwhen adding the NFT we need to simulate an untake/stake because we need to recalculate the new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot",
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake",
          "tokenAddress": "the address of the NFT",
          "tokenId": "the id of the NFT token"
        }
      },
      "addRewardStream(uint256,uint256,uint256)": {
        "params": {
          "periodBlockRate": "The reward per block",
          "periodLastBlock": "The last block of the period",
          "rewardStreamIndex": "The reward index"
        }
      },
      "getCurrentPeriodAverageReward()": {
        "returns": {
          "_0": "(uint256) The current period average"
        }
      },
      "getCurrentPeriodLength()": {
        "returns": {
          "_0": "(uint256) The current period length"
        }
      },
      "getHistoryAverageForStake(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The calculated history average"
        }
      },
      "getHistoryLength()": {
        "returns": {
          "_0": "(uint256) The history length"
        }
      },
      "getHistoryLengthBeforeStakerEntered(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The length of the history"
        }
      },
      "getStakerPoolShare(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The userPoolShare"
        }
      },
      "getStakerReward(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The total rewards acumulated till now"
        }
      },
      "getStakerRewardFromCurrent(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The reward for current period"
        }
      },
      "getStakerRewardFromHistory(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the staker you wish to get the rewards"
        },
        "returns": {
          "_0": "uint256 The amount of tokes user will get from history"
        }
      },
      "getStakerTimeInHistory(address,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake",
          "staker": "the address of the owner of the stake"
        },
        "returns": {
          "_0": "(uint256) The number of blocks in history"
        }
      },
      "getTotalGeneratedReward()": {
        "returns": {
          "_0": "(uint256) The the calculated reward"
        }
      },
      "getTotalRewardInCurrentPeriod()": {
        "returns": {
          "_0": "(uint256) The current period total reward"
        }
      },
      "getUserStakes(address)": {
        "returns": {
          "_0": "(uint256) The number of all the stakes user has ever staked"
        }
      },
      "initialize(address,address,uint256[],uint256[],uint256,uint256,address,address)": {
        "params": {
          "_locks": "The array with the locks durations values",
          "_rarityRegister": "The rarity register address",
          "_rewardToken": "The reward token address",
          "_ticket": "The raffle ticket address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRarityRegister(address)": {
        "params": {
          "newRarityRegister": "the new value"
        }
      },
      "setTicket(address)": {
        "params": {
          "ticketAddress": "the new value"
        }
      },
      "setTicketsMintingChillPeriod(uint256)": {
        "params": {
          "newTicketsMintingChillPeriod": "the new value"
        }
      },
      "setTicketsMintingRatio(uint256)": {
        "params": {
          "newTicketsMintingRatio": "the new value"
        }
      },
      "stake(uint256,bytes)": {
        "details": "Users wil be able to unstake only after the lock durationn has pased.The lock duration in the data bytes is required, its the index of the locks array Should be the fist 32 bytes in the bytes array",
        "params": {
          "amount": "the inumber of tokens to be staked",
          "data": "the bytes containig extra information about the staking lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)"
        }
      },
      "stakeFor(address,uint256,bytes)": {
        "params": {
          "amount": "uint256 the amount of tokens to stake",
          "data": "bytes aditional for the stake and to include in the Stake event lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)",
          "user": "the address the tokens are staked for"
        }
      },
      "supportsHistory()": {
        "details": "Since we don't implement the optional interface, this always returns false",
        "returns": {
          "_0": "bool Whether or not the optional history functions are implemented"
        }
      },
      "token()": {
        "returns": {
          "_0": "address The address of the ERC20 token used for staking"
        }
      },
      "totalStaked()": {
        "returns": {
          "_0": "uint256 The number of tokens staked in the contract"
        }
      },
      "totalStakedFor(address)": {
        "params": {
          "staker": "address The address to query"
        },
        "returns": {
          "_0": "uint256 The number of tokens staked for the given address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256,bytes)": {
        "details": "Unstaking tokens is an atomic operation—either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be   transferred back to their account, and their personalStakeIndex will increment to the next active stake.",
        "params": {
          "amount": "uint256 the amount of tokens to unstake",
          "data": "bytes optional data to include in the Unstake event"
        }
      },
      "unstakeERC721(bytes)": {
        "params": {
          "data": "bytes optional data to include in the Unstake event"
        }
      },
      "updateLocks(uint256,uint256,uint256)": {
        "params": {
          "lockIndex": "the lock index",
          "lockNumber": "the new lock duration value"
        }
      }
    },
    "title": "A Staking smart contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLockDuration(uint256,uint256)": {
        "notice": "Will add a new lock duration value"
      },
      "addNftToStake(address,uint256,address,uint256)": {
        "notice": "Allows user to stake an nft to an existing stake for extra rewardit MUST revert if the added token has no multiplier"
      },
      "addRewardStream(uint256,uint256,uint256)": {
        "notice": "Will create a new rewad stream"
      },
      "getCurrentPeriodAverageReward()": {
        "notice": "Will calculate the current period average reward"
      },
      "getCurrentPeriodLength()": {
        "notice": "Will calculate the current period length"
      },
      "getHistoryAverageForStake(address,uint256)": {
        "notice": "Will calculate and return the history average for a stake"
      },
      "getHistoryLength()": {
        "notice": "Will calculate the history length in blocks"
      },
      "getHistoryLengthBeforeStakerEntered(address,uint256)": {
        "notice": "Will calculate and return what the history length was a the moment the stake was created"
      },
      "getStakerPoolShare(address,uint256)": {
        "notice": "Will get the pool share for a specific stake"
      },
      "getStakerReward(address,uint256)": {
        "notice": "Will calculate and return the total reward user has accumulated till now for a specific stake"
      },
      "getStakerRewardFromCurrent(address,uint256)": {
        "notice": "Will get the reward of a stake for the curent period"
      },
      "getStakerRewardFromHistory(address,uint256)": {
        "notice": "Will calculate the rewards that user will get from history"
      },
      "getStakerTimeInHistory(address,uint256)": {
        "notice": "Will calculate and return for how many block the stake has in history"
      },
      "getTotalGeneratedReward()": {
        "notice": "Will calculate the total reward generated from start till now"
      },
      "getTotalRewardInCurrentPeriod()": {
        "notice": "Will calculate the current period total reward"
      },
      "initialize(address,address,uint256[],uint256[],uint256,uint256,address,address)": {
        "notice": "Constructor"
      },
      "setRarityRegister(address)": {
        "notice": "Will update the rarityRegister address"
      },
      "setTicket(address)": {
        "notice": "Will update the ticket address"
      },
      "setTicketsMintingChillPeriod(uint256)": {
        "notice": "Will update the ticketsMintingChillPeriod"
      },
      "setTicketsMintingRatio(uint256)": {
        "notice": "Will update the numebr of stakingUnits needed to earn one ticket"
      },
      "stake(uint256,bytes)": {
        "notice": "Allows user to stake tokensOptionaly user can stake a NFT token for extra reward"
      },
      "stakeFor(address,uint256,bytes)": {
        "notice": "Stakes a certain amount of tokens, this MUST transfer the given amount from the callerMUST trigger Staked event"
      },
      "supportsHistory()": {
        "notice": "MUST return true if the optional history functions are implemented, otherwise false"
      },
      "token()": {
        "notice": "Address of the token being used by the staking interface"
      },
      "totalStaked()": {
        "notice": "Returns the current total of tokens staked"
      },
      "totalStakedFor(address)": {
        "notice": "Returns the current total of tokens staked for an address"
      },
      "unstake(uint256,bytes)": {
        "notice": "Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revertMUST trigger Unstaked event"
      },
      "unstakeERC721(bytes)": {
        "notice": "This function offers a way to withdraw a ERC721 after using failsafeUnstakeERC20.If for any reason the ERC721 should function again, this function allows to withdraw it."
      },
      "updateLocks(uint256,uint256,uint256)": {
        "notice": "Will update an existing lock value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 212,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1105,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "rewardStreamInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(RewardStreamInfo)1223_storage"
      },
      {
        "astId": 1908,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "stakingInfo",
        "offset": 0,
        "slot": "105",
        "type": "t_struct(StakingInfo)3064_storage"
      },
      {
        "astId": 1914,
        "contract": "contracts/Staking/Staking.sol:Staking",
        "label": "_userStakes",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_array(t_struct(UserStake)3921_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardStream)1232_storage)dyn_storage": {
        "base": "t_struct(RewardStream)1232_storage",
        "encoding": "dynamic_array",
        "label": "struct RewardStreamerLib.RewardStream[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserStake)3921_storage)dyn_storage": {
        "base": "t_struct(UserStake)3921_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingLib.UserStake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(UserStake)3921_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingLib.UserStake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserStake)3921_storage)dyn_storage"
      },
      "t_struct(RewardStream)1232_storage": {
        "encoding": "inplace",
        "label": "struct RewardStreamerLib.RewardStream",
        "members": [
          {
            "astId": 1226,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "periodRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1229,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "periodEnds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1231,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rewardStreamCursor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardStreamInfo)1223_storage": {
        "encoding": "inplace",
        "label": "struct RewardStreamerLib.RewardStreamInfo",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rewardStreams",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(RewardStream)1232_storage)dyn_storage"
          },
          {
            "astId": 1218,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rewardStreamsLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1220,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "deployedAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1222,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rewardToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakingInfo)3064_storage": {
        "encoding": "inplace",
        "label": "struct StakingLib.StakingInfo",
        "members": [
          {
            "astId": 3037,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "historyStartBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3039,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "historyEndBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3041,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "historyAverageReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3043,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "historyRewardPot",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3045,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "totalCurrentlyStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3047,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "totalStakingUnits",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3049,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "totalDistributedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3052,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "locks",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3055,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "locksMultiplier",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3057,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticketsMintingRatio",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3059,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticketsMintingChillPeriod",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 3061,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticket",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 3063,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rarityRegister",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(UserStake)3921_storage": {
        "encoding": "inplace",
        "label": "struct StakingLib.UserStake",
        "members": [
          {
            "astId": 3901,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "stakingUnits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3903,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "amountStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3905,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "enteredAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3907,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "historyAverageRewardWhenEntered",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3909,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticketsMintingRatioWhenEntered",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3911,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticketsMintingChillPeriodWhenEntered",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3913,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "lockedTill",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3915,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "rewardCredit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3917,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "ticketsMinted",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3920,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "userStakedToken",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(UserStakedToken)3899_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(UserStakedToken)3899_storage": {
        "encoding": "inplace",
        "label": "struct StakingLib.UserStakedToken",
        "members": [
          {
            "astId": 3896,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3898,
            "contract": "contracts/Staking/Staking.sol:Staking",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}