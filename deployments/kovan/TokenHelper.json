{
  "address": "0x4bba64b19dfef99994BD40B7C7e2D4C70CfB95FD",
  "abi": [],
  "transactionHash": "0xd58f027f9995869e3548c749f43c39a74c11311ac31059e8f72db81dcff2919a",
  "receipt": {
    "to": null,
    "from": "0xA27DF20E6579aC472481F0Ea918165d24bFb713b",
    "contractAddress": "0x4bba64b19dfef99994BD40B7C7e2D4C70CfB95FD",
    "transactionIndex": 1,
    "gasUsed": "727938",
    "logsBloom": "0x
    "blockHash": "0xf30cdc9db3b64946d12ab27c164cc0691d9673d12013de24002ba02147f58d45",
    "transactionHash": "0xd58f027f9995869e3548c749f43c39a74c11311ac31059e8f72db81dcff2919a",
    "logs": [],
    "blockNumber": 26269939,
    "cumulativeGasUsed": "748938",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9ed73cb8aea12ac13912a00e2d28ba22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/TokenHelper.sol\":\"TokenHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Raffle/IRaffleTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticekt for Coinburp Raffle\\n/// @author Gilbert Kim @gilbertk422\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x012a6017282b704f9d4a10524d6490582aae41ab5f721ea3dc4202de46a32896\",\"license\":\"MIT\"},\"contracts/Staking/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                (, bytes memory data) = token\\n                    .call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\\n\\n                return abi.decode(data, (address)) == address(this);\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n    }\\n}\",\"keccak256\":\"0xf6c8bcd2f81b9f551d69694149d66db1619f9663e334a679c42188f43933720d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x610c3a610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80635043eee61461005b5780639059b15414610084578063a1c01124146100c1578063e59fdd36146100ea575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d919061079d565b610113565b005b81801561009057600080fd5b506100ab60048036038101906100a691906107ec565b6101fc565b6040516100b89190610a5f565b60405180910390f35b8180156100cd57600080fd5b506100e860048036038101906100e3919061073a565b610410565b005b8180156100f657600080fd5b50610111600480360381019061010c919061079d565b610568565b005b8273ffffffffffffffffffffffffffffffffffffffff1663156e29f660e01b83600084604051602401610148939291906109ff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101b291906109b1565b6000604051808303816000865af19150503d80600081146101ef576040519150601f19603f3d011682016040523d82523d6000602084013e6101f4565b606091505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b848487604051602401610232939291906109c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161029c91906109b1565b6000604051808303816000865af19150503d80600081146102d9576040519150601f19603f3d011682016040523d82523d6000602084013e6102de565b606091505b50505060008573ffffffffffffffffffffffffffffffffffffffff16636352211e60e01b866040516024016103139190610aba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161037d91906109b1565b6000604051808303816000865af19150503d80600081146103ba576040519150601f19603f3d011682016040523d82523d6000602084013e6103bf565b606091505b509150503073ffffffffffffffffffffffffffffffffffffffff16818060200190518101906103ee9190610711565b73ffffffffffffffffffffffffffffffffffffffff1614915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610447939291906109c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104b191906109b1565b6000604051808303816000865af19150503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b5091509150818015610521575060008151148061052057508080602001905181019061051f919061084f565b5b5b610560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055790610a7a565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161059d929190610a36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161060791906109b1565b6000604051808303816000865af19150503d8060008114610644576040519150601f19603f3d011682016040523d82523d6000602084013e610649565b606091505b50915091508180156106775750600081511480610676575080806020019051810190610675919061084f565b5b5b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90610a9a565b60405180910390fd5b5050505050565b6000813590506106cc81610ba8565b92915050565b6000815190506106e181610bbf565b92915050565b6000815190506106f681610bd6565b92915050565b60008135905061070b81610bed565b92915050565b60006020828403121561072357600080fd5b6000610731848285016106d2565b91505092915050565b6000806000806080858703121561075057600080fd5b600061075e878288016106bd565b945050602061076f878288016106bd565b9350506040610780878288016106bd565b9250506060610791878288016106fc565b91505092959194509250565b6000806000606084860312156107b257600080fd5b60006107c0868287016106bd565b93505060206107d1868287016106bd565b92505060406107e2868287016106fc565b9150509250925092565b6000806000806080858703121561080257600080fd5b6000610810878288016106bd565b9450506020610821878288016106fc565b9350506040610832878288016106bd565b9250506060610843878288016106bd565b91505092959194509250565b60006020828403121561086157600080fd5b600061086f848285016106e7565b91505092915050565b61088181610afc565b82525050565b61089081610b20565b82525050565b60006108a182610ad5565b6108ab8185610ae0565b93506108bb818560208601610b75565b80840191505092915050565b6108d081610b63565b82525050565b60006108e3603383610aeb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e6365206f7220616c6c6f77616e6365000000000000000000000000006020830152604082019050919050565b6000610949602683610aeb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6109ab81610b4c565b82525050565b60006109bd8284610896565b915081905092915050565b60006060820190506109dd6000830186610878565b6109ea6020830185610878565b6109f760408301846109a2565b949350505050565b6000606082019050610a146000830186610878565b610a2160208301856108c7565b610a2e60408301846109a2565b949350505050565b6000604082019050610a4b6000830185610878565b610a5860208301846109a2565b9392505050565b6000602082019050610a746000830184610887565b92915050565b60006020820190508181036000830152610a93816108d6565b9050919050565b60006020820190508181036000830152610ab38161093c565b9050919050565b6000602082019050610acf60008301846109a2565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610b0782610b2c565b9050919050565b6000610b1982610b2c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610b6e82610b56565b9050919050565b60005b83811015610b93578082015181840152602081019050610b78565b83811115610ba2576000848401525b50505050565b610bb181610afc565b8114610bbc57600080fd5b50565b610bc881610b0e565b8114610bd357600080fd5b50565b610bdf81610b20565b8114610bea57600080fd5b50565b610bf681610b4c565b8114610c0157600080fd5b5056fea264697066735822122070302f5acd7f1e5b9432eee709b6709a9d927a075ef8f27ba3337f0ec4eab76664736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80635043eee61461005b5780639059b15414610084578063a1c01124146100c1578063e59fdd36146100ea575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d919061079d565b610113565b005b81801561009057600080fd5b506100ab60048036038101906100a691906107ec565b6101fc565b6040516100b89190610a5f565b60405180910390f35b8180156100cd57600080fd5b506100e860048036038101906100e3919061073a565b610410565b005b8180156100f657600080fd5b50610111600480360381019061010c919061079d565b610568565b005b8273ffffffffffffffffffffffffffffffffffffffff1663156e29f660e01b83600084604051602401610148939291906109ff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101b291906109b1565b6000604051808303816000865af19150503d80600081146101ef576040519150601f19603f3d011682016040523d82523d6000602084013e6101f4565b606091505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b848487604051602401610232939291906109c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161029c91906109b1565b6000604051808303816000865af19150503d80600081146102d9576040519150601f19603f3d011682016040523d82523d6000602084013e6102de565b606091505b50505060008573ffffffffffffffffffffffffffffffffffffffff16636352211e60e01b866040516024016103139190610aba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161037d91906109b1565b6000604051808303816000865af19150503d80600081146103ba576040519150601f19603f3d011682016040523d82523d6000602084013e6103bf565b606091505b509150503073ffffffffffffffffffffffffffffffffffffffff16818060200190518101906103ee9190610711565b73ffffffffffffffffffffffffffffffffffffffff1614915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610447939291906109c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104b191906109b1565b6000604051808303816000865af19150503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b5091509150818015610521575060008151148061052057508080602001905181019061051f919061084f565b5b5b610560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055790610a7a565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161059d929190610a36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161060791906109b1565b6000604051808303816000865af19150503d8060008114610644576040519150601f19603f3d011682016040523d82523d6000602084013e610649565b606091505b50915091508180156106775750600081511480610676575080806020019051810190610675919061084f565b5b5b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90610a9a565b60405180910390fd5b5050505050565b6000813590506106cc81610ba8565b92915050565b6000815190506106e181610bbf565b92915050565b6000815190506106f681610bd6565b92915050565b60008135905061070b81610bed565b92915050565b60006020828403121561072357600080fd5b6000610731848285016106d2565b91505092915050565b6000806000806080858703121561075057600080fd5b600061075e878288016106bd565b945050602061076f878288016106bd565b9350506040610780878288016106bd565b9250506060610791878288016106fc565b91505092959194509250565b6000806000606084860312156107b257600080fd5b60006107c0868287016106bd565b93505060206107d1868287016106bd565b92505060406107e2868287016106fc565b9150509250925092565b6000806000806080858703121561080257600080fd5b6000610810878288016106bd565b9450506020610821878288016106fc565b9350506040610832878288016106bd565b9250506060610843878288016106bd565b91505092959194509250565b60006020828403121561086157600080fd5b600061086f848285016106e7565b91505092915050565b61088181610afc565b82525050565b61089081610b20565b82525050565b60006108a182610ad5565b6108ab8185610ae0565b93506108bb818560208601610b75565b80840191505092915050565b6108d081610b63565b82525050565b60006108e3603383610aeb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e6365206f7220616c6c6f77616e6365000000000000000000000000006020830152604082019050919050565b6000610949602683610aeb565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6109ab81610b4c565b82525050565b60006109bd8284610896565b915081905092915050565b60006060820190506109dd6000830186610878565b6109ea6020830185610878565b6109f760408301846109a2565b949350505050565b6000606082019050610a146000830186610878565b610a2160208301856108c7565b610a2e60408301846109a2565b949350505050565b6000604082019050610a4b6000830185610878565b610a5860208301846109a2565b9392505050565b6000602082019050610a746000830184610887565b92915050565b60006020820190508181036000830152610a93816108d6565b9050919050565b60006020820190508181036000830152610ab38161093c565b9050919050565b6000602082019050610acf60008301846109a2565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610b0782610b2c565b9050919050565b6000610b1982610b2c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610b6e82610b56565b9050919050565b60005b83811015610b93578082015181840152602081019050610b78565b83811115610ba2576000848401525b50505050565b610bb181610afc565b8114610bbc57600080fd5b50565b610bc881610b0e565b8114610bd357600080fd5b50565b610bdf81610b20565b8114610bea57600080fd5b50565b610bf681610b4c565b8114610c0157600080fd5b5056fea264697066735822122070302f5acd7f1e5b9432eee709b6709a9d927a075ef8f27ba3337f0ec4eab76664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}