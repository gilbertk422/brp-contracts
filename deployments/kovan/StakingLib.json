{
  "address": "0xcBE5ee787d60CfA0dde84F8cfb677827A11dd7C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "applyPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPeriodLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPeriodAverageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentHistoryLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "historyStartBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "historyAverageReward",
          "type": "uint256"
        }
      ],
      "name": "getNewHistoryAverageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getStakeIndexFromCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getTokenAddressFromCalldata",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getTokenIdFromCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "oldHistoryRewardPot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardInCurrentPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerReward",
          "type": "uint256"
        }
      ],
      "name": "historyRewardPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "parse32BytesToUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "parsed",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "parseBytesToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "parsed",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "historyStartBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "totalGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x58d882092f7c6e680d2872b1f0dfd05a726f17dbfa0b250a355a6b5fd1d06f6c",
  "receipt": {
    "to": null,
    "from": "0xA27DF20E6579aC472481F0Ea918165d24bFb713b",
    "contractAddress": "0xcBE5ee787d60CfA0dde84F8cfb677827A11dd7C8",
    "transactionIndex": 3,
    "gasUsed": "3254827",
    "logsBloom": "0x
    "blockHash": "0x79740f8ed90215f44abcfd4fc6048ba76e0e8270edae4264f96149c0d4107463",
    "transactionHash": "0x58d882092f7c6e680d2872b1f0dfd05a726f17dbfa0b250a355a6b5fd1d06f6c",
    "logs": [],
    "blockNumber": 26269949,
    "cumulativeGasUsed": "5066378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "85900dad8b31d7fd657884e07c2180f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"applyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPeriodAverageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentHistoryLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyAverageReward\",\"type\":\"uint256\"}],\"name\":\"getNewHistoryAverageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getStakeIndexFromCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTokenAddressFromCalldata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTokenIdFromCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldHistoryRewardPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardInCurrentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerReward\",\"type\":\"uint256\"}],\"name\":\"historyRewardPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"parse32BytesToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parsed\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"parseBytesToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parsed\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"historyStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"totalGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNftToStake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256,address,uint256)\":{\"details\":\"The stake should existwhen adding the NFT we need to simulate an untake/stake because we need to recalculate the new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\"},\"applyPercent(uint256,uint256)\":{\"params\":{\"number\":\"The number to multiply\",\"percent\":\"The percentage to apply\"},\"returns\":{\"_0\":\"(uint256) the operation result\"}},\"claimTickets(address,StakingLib.UserStake storage,address)\":{\"params\":{\"staker\":\"the address fo the staker\",\"ticket\":\"the address of the ticket instance\",\"userStake\":\"the stake to claim tickets from\"}},\"getCurrentPeriodAverageReward(StakingLib.StakingInfo storage,uint256,bool)\":{\"params\":{\"excludeLast\":\"wether or not exclude the last block\",\"stakingInfo\":\"the struct containing staking info\",\"totalReward\":\"the total reward in current period\"},\"returns\":{\"_0\":\"(uint256) number of blocks in history\"}},\"getCurrentPeriodLength(StakingLib.StakingInfo storage)\":{\"returns\":{\"_0\":\"(uint256) The current period length\"}},\"getCurrentPeriodLength(StakingLib.StakingInfo storage,bool)\":{\"params\":{\"excludeLast\":\"a flag that indicates to include the last block or not\"},\"returns\":{\"_0\":\"(uint256) The current period length\"}},\"getHistoryAverageForStaker(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"returns\":{\"_0\":\"(uint256) the calculated average\"}},\"getHistoryLength(StakingLib.StakingInfo storage)\":{\"returns\":{\"_0\":\"(uint256) The history length\"}},\"getHistoryLengthBeforeStakerEntered(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\"},\"returns\":{\"_0\":\"(uint256) The length of the history\"}},\"getLockDuration(StakingLib.StakingInfo storage,bytes)\":{\"details\":\"the bytes should contain the index of the lock in the first 32 bytesthe index should be < locks.length\",\"params\":{\"data\":\"bytes from the stake action\"},\"returns\":{\"_0\":\"uint256 The duration of the lock (time for wich the stake will be locked)\"}},\"getNewHistoryAverageReward(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"this is called **before** we update history end block\",\"returns\":{\"_0\":\"uint256 The calculated newHistoryAverageReward\"}},\"getStakeIndexFromCalldata(bytes)\":{\"details\":\"[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\",\"params\":{\"data\":\"bytes from the stake action\"},\"returns\":{\"_0\":\"(uint256) the parsed index\"}},\"getStakerReward(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"params\":{\"stakeIndex\":\"the index of the stake\"},\"returns\":{\"_0\":\"(uint256) The total rewards acumulated till now\"}},\"getStakerRewardFromCurrentPeriod(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"returns\":{\"_0\":\"(uint256) the calculater reward\"}},\"getStakerRewardFromHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"returns\":{\"_0\":\"(uint256) the calculater reward\"}},\"getStakerTimeInHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"returns\":{\"_0\":\"(uint256) number of blocks in history\"}},\"getTokenAddressFromCalldata(bytes)\":{\"details\":\"[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\",\"params\":{\"data\":\"bytes from the stake action\"},\"returns\":{\"_0\":\"(address) the parsed address\"}},\"getTokenIdFromCalldata(bytes)\":{\"details\":\"[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\",\"params\":{\"data\":\"bytes from the stake action\"},\"returns\":{\"_0\":\"(uint256) the parsed tokenId\"}},\"historyRewardPot(uint256,uint256,uint256)\":{\"params\":{\"oldHistoryRewardPot\":\"the old history reward pot\",\"stakerReward\":\"the staker reward\",\"totalRewardInCurrentPeriod\":\"the total reward from current period\"},\"returns\":{\"_0\":\"(uint256) the new history reward pot\"}},\"parse32BytesToUint256(bytes,uint256)\":{\"params\":{\"data\":\"bytes data\",\"from\":\"from where to start the parsing\"}},\"parseBytesToAddress(bytes,uint256)\":{\"params\":{\"data\":\"bytes data\",\"from\":\"from where to start the parsing\"}},\"removeNftFromStake(StakingLib.UserStakedToken storage,address)\":{\"params\":{\"staker\":\"the address of the owner of the stake\"}},\"stake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,address,uint256,bytes)\":{\"details\":\"Users wil be able to unstake only after the lock durationn has pased.The lock duration in the data bytes is required, its the index of the locks array Should be the fist 32 bytes in the bytes array\",\"params\":{\"amount\":\"the inumber of tokens to be staked\",\"data\":\"the bytes containig extra information about the staking lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)\"}},\"totalGeneratedReward(uint256,uint256,uint256)\":{\"params\":{\"_block\":\"the current block\",\"historyStartBlock\":\"the first history block\",\"rewardPerBlock\":\"the amount of tokens rewarded per block\"},\"returns\":{\"_0\":\"(uint256) number of blocks in history\"}},\"unstake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"details\":\"Unstaking tokens is an atomic operation\\u2014either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\",\"returns\":{\"_0\":\"uint256 The number of tokens unstaked\"}},\"userPoolShare(StakingLib.UserStake[] storage,uint256,uint256)\":{\"params\":{\"totalStakingUnits\":\"sum of all user stake shares\"},\"returns\":{\"_0\":\"(uint256) the calculater pool share\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNftToStake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256,address,uint256)\":{\"notice\":\"Allows user to stake an nft to an existing stake for extra rewardit MUST revert if the added token has no multiplier\"},\"applyPercent(uint256,uint256)\":{\"notice\":\"Will apply a percentage to a number\"},\"claimTickets(address,StakingLib.UserStake storage,address)\":{\"notice\":\"Mint tickets to the stakerThe amount of tickets depends on the amount of tokens staked and the duration the tokens a locked for.\"},\"getCurrentPeriodAverageReward(StakingLib.StakingInfo storage,uint256,bool)\":{\"notice\":\"Calculate the average reward for the current period\"},\"getCurrentPeriodLength(StakingLib.StakingInfo storage)\":{\"notice\":\"Will calculate the current period length\"},\"getCurrentPeriodLength(StakingLib.StakingInfo storage,bool)\":{\"notice\":\"Will calculate the current period length optionaly including the last block\"},\"getHistoryAverageForStaker(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Calculate the history average for staker\"},\"getHistoryLength(StakingLib.StakingInfo storage)\":{\"notice\":\"Will calculate the history length in blocks\"},\"getHistoryLengthBeforeStakerEntered(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Will calculate and return what the history length was a the moment the stake was created\"},\"getLockDuration(StakingLib.StakingInfo storage,bytes)\":{\"notice\":\"Will get the lock duration from the stake bytes data\"},\"getNewHistoryAverageReward(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the new History Average Reward\"},\"getStakeIndexFromCalldata(bytes)\":{\"notice\":\"Will parse the stake bytes data to get the stake index\"},\"getStakerReward(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Will calculate and return the total reward user has accumulated till now for a specific stake\"},\"getStakerRewardFromCurrentPeriod(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Calculate the reward from current period\"},\"getStakerRewardFromHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Calculate the stake reward from history\"},\"getStakerTimeInHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Calculate the staker time in history\"},\"getTokenAddressFromCalldata(bytes)\":{\"notice\":\"Will parse the stake bytes data to get the NFT address\"},\"getTokenIdFromCalldata(bytes)\":{\"notice\":\"Will parse the stake bytes data to get the NFT tokeId\"},\"historyRewardPot(uint256,uint256,uint256)\":{\"notice\":\"Calculate the new history reward pot\"},\"parse32BytesToUint256(bytes,uint256)\":{\"notice\":\"Will parse bytes data to get an uint256\"},\"parseBytesToAddress(bytes,uint256)\":{\"notice\":\"Will parse bytes data to get an address\"},\"removeNftFromStake(StakingLib.UserStakedToken storage,address)\":{\"notice\":\"Remove the preveusly staked NFT from the stake\"},\"stake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,address,uint256,bytes)\":{\"notice\":\"Allows user to stake tokensOptionaly user can stake a NFT token for extra reward\"},\"totalGeneratedReward(uint256,uint256,uint256)\":{\"notice\":\"Calculate the total generated reward for a period\"},\"unstake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)\":{\"notice\":\"Allows user to unstake the staked tokensThe tokens are allowed to be unstaked only after the lock duration has passedMUST trigger Unstaked event\"},\"userPoolShare(StakingLib.UserStake[] storage,uint256,uint256)\":{\"notice\":\"Calculate the user share in the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingLib.sol\":\"StakingLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/NFTRarityRegister/INFTRarityRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Registry holding the rarity value of a given NFT.\\n/// @author Gilbert Kim @gilbertk422\\ninterface INFTRarityRegister {\\n\\t/**\\n\\t * The Staking SC allows to stake Prizes won via lottery which can be used to increase the APY of\\n\\t * staked tokens according to the rarity of NFT staked. For this reason,\\n\\t * we need to hold a table that the Staking SC can query and get back the rarity value of a given\\n\\t * NFT price (even the ones in the past).\\n\\t */\\n\\tevent NftRarityStored(\\n\\t\\taddress indexed tokenAddress,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 rarityValue\\n\\t);\\n\\n\\t/**\\n\\t * @dev Store the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @param rarityValue The rarity of a given NFT address and id unique combination\\n\\t */\\n\\tfunction storeNftRarity(address tokenAddress, uint256 tokenId, uint8 rarityValue) external;\\n\\n\\t/**\\n\\t * @dev Get the rarity of a given NFT\\n\\t * @param tokenAddress The NFT smart contract address e.g., ERC-721 standard contract\\n\\t * @param tokenId The NFT's unique token id\\n\\t * @return The the rarity of a given NFT address and id unique combination and timestamp\\n\\t */\\n\\tfunction getNftRarity(address tokenAddress, uint256 tokenId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x943d04b4e4a5ed74355ac4406d33689fe525dffb38e197e076db1641a517848a\",\"license\":\"MIT\"},\"contracts/Raffle/IRaffleTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticekt for Coinburp Raffle\\n/// @author Gilbert Kim @gilbertk422\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x012a6017282b704f9d4a10524d6490582aae41ab5f721ea3dc4202de46a32896\",\"license\":\"MIT\"},\"contracts/Staking/RewardStreamerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary RewardStreamerLib {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct RewardStreamInfo {\\n\\t\\tRewardStream[] rewardStreams;\\n\\t\\tuint256 rewardStreamsLength;\\n\\t\\tuint256 deployedAtBlock;\\n\\t\\taddress rewardToken;\\n\\t}\\n\\n\\tstruct RewardStream {\\n\\t\\tuint256[] periodRewards;\\n\\t\\tuint256[] periodEnds;\\n\\t\\tuint256 rewardStreamCursor;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction setRewardToken(RewardStreamInfo storage rewardStreamInfo, address rewardTokenAddress) public {\\n\\t\\trewardStreamInfo.rewardToken = address(rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new rewad stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint256 rewardPerBlock,\\n\\t\\tuint256 rewardLastBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// e.g. current length = 0 and we add index 1\\n\\t\\trequire(rewardStreamIndex < rewardStreamInfo.rewardStreams.length.add(1), \\\"RewardStreamer: you cannot skip an index\\\");\\n\\n\\t\\tuint256 tokensInReward;\\n\\n\\t\\tif(rewardStreamInfo.rewardStreams.length > rewardStreamIndex) {\\n\\t\\t\\tRewardStream storage rewardStream = rewardStreamInfo.rewardStreams[rewardStreamIndex];\\n\\t\\t\\tuint256[] storage periodEnds = rewardStream.periodEnds;\\n\\n\\t\\t\\tuint periodStart = periodEnds.length == 0\\n\\t\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t\\t: periodEnds[periodEnds.length - 1];\\n\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t} else {\\n\\t\\t\\tRewardStream memory rewardStream;\\n\\n\\t\\t\\tuint periodStart = rewardStreamInfo.deployedAtBlock;\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams.push(rewardStream);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t}\\n\\n\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), tokensInReward);\\n\\n\\t\\treturn tokensInReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Get the rewards for a period\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the total reward\\n\\t*/\\n\\tfunction unsafeGetRewardsFromRange(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(!_isContract(msg.sender), \\\"StakingReward: unsafe function for contract call\\\");\\n\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\t0\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the ireward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction iterateRewards(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// the start block is bigger than\\n\\t\\tif(rewardIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex - 1];\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\treturn iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\tfunction getRewardAndUpdateCursor (\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 fromBlock,\\n\\t\\tuint256 toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewardsWithCursor(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardStreamInfo.rewardStreams[i].rewardStreamCursor\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\tfunction bumpStreamCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t// this step is important to avoid going out of index\\n\\t\\tif(rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor < rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor = rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor.add(1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction iterateRewardsWithCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardPeriodIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif(rewardPeriodIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardPeriodIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardPeriodIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex - 1];\\n\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\t// the fromBlock passed this reward period, we can start\\n\\t\\t\\t// skipping it for next reads\\n\\t\\t\\tbumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\n\\t\\t\\treturn iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Returns true if `account` is a contract.\\n\\t* @param account the address to check\\n\\t* @return (bool) if the account is a contract\\n\\t*/\\n\\tfunction _isContract(address account) public view returns (bool) {\\n\\t\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t\\t// constructor execution.\\n\\n\\t\\t\\tuint256 size;\\n\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\t\\tassembly { size := extcodesize(account) }\\n\\t\\t\\treturn size > 0;\\n\\t}\\n}\",\"keccak256\":\"0xf000bdedc7c108f1c4e8193691f3a86d8f69f1b2505fabd3909e757ac64ae6f7\",\"license\":\"MIT\"},\"contracts/Staking/StakingLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../NFTRarityRegister/INFTRarityRegister.sol\\\";\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\nimport \\\"./RewardStreamerLib.sol\\\";\\n\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary StakingLib {\\n\\tusing SafeMath for uint256;\\n  // **************************\\n\\t// **| StakingLib section |**\\n  // **************************\\n\\n\\tstruct StakingInfo {\\n\\t\\tuint256 historyStartBlock; // this is set only when we deploy the contract\\n\\t\\tuint256 historyEndBlock; // it starts and finishes in the same block (so length is 0)\\n\\t\\tuint256 historyAverageReward; // how many reward tokens (in Wei) we give PER TOKEN STAKED PER BLOCK\\n\\t\\tuint256 historyRewardPot; // the tokens unclaimed from history\\n\\n\\t\\tuint256 totalCurrentlyStaked; // the actual amount of $BURP tokens sent from users\\n\\t\\tuint256 totalStakingUnits; // sum of all user stake shares\\n\\n\\t\\tuint256 totalDistributedRewards; // sum of all distributed rewards, mainly helpful for testing\\n\\n\\t\\tuint256[] locks;\\n\\t\\tuint256[] locksMultiplier;\\n\\n\\t\\tuint256 ticketsMintingRatio;\\n\\t\\tuint256 ticketsMintingChillPeriod;\\n\\n\\t\\taddress ticket;\\n\\t\\taddress rarityRegister;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will get the lock duration from the stake bytes data\\n\\t* @dev the bytes should contain the index of the lock in the first 32 bytes\\n\\t* @dev the index should be < locks.length\\n\\t* @param data bytes from the stake action\\n\\t* @return uint256 The duration of the lock (time for wich the stake will be locked)\\n\\t*/\\n\\tfunction getLockDuration(StakingInfo storage stakingInfo, bytes memory data) public view returns (uint256, uint256) {\\n\\t\\trequire(data.length >= 32, 'Stake: data should by at least 32 bytes');\\n\\n\\t\\tuint256 lengthIndex = getStakeIndexFromCalldata(data);\\n\\n\\t\\trequire(lengthIndex < stakingInfo.locks.length, 'Stake: lock index out of bounds');\\n\\n\\t\\treturn (stakingInfo.locks[lengthIndex], lengthIndex);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo) public view returns(uint256) {\\n\\t\\treturn uint256(block.number).sub(stakingInfo.historyEndBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the current period length optionaly including the last block\\n\\t* @param excludeLast a flag that indicates to include the last block or not\\n\\t* @return (uint256) The current period length\\n\\t*/\\n\\tfunction getCurrentPeriodLength(StakingInfo storage stakingInfo, bool excludeLast) public view returns(uint256) {\\n\\t\\treturn excludeLast ? getCurrentPeriodLength(stakingInfo).sub(1) : getCurrentPeriodLength(stakingInfo);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate the history length in blocks\\n\\t* @return (uint256) The history length\\n\\t*/\\n\\tfunction getHistoryLength(StakingInfo storage stakingInfo) public view returns (uint256){\\n\\t\\treturn stakingInfo.historyEndBlock.sub(stakingInfo.historyStartBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the average reward for the current period\\n\\t* @param stakingInfo the struct containing staking info\\n\\t* @param totalReward the total reward in current period\\n\\t* @param excludeLast wether or not exclude the last block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getCurrentPeriodAverageReward(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 totalReward,\\n\\t\\tbool excludeLast\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakingInfo.totalStakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 currentPeriodLength = getCurrentPeriodLength(stakingInfo, excludeLast);\\n\\t\\tif(currentPeriodLength == 0 ) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn totalReward\\n\\t\\t\\t.mul(10**18)\\n\\t\\t\\t.div(stakingInfo.totalStakingUnits)\\n\\t\\t\\t.div(currentPeriodLength);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the total generated reward for a period\\n\\t* @param _block the current block\\n\\t* @param historyStartBlock the first history block\\n\\t* @param rewardPerBlock the amount of tokens rewarded per block\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction totalGeneratedReward(uint256 _block, uint256 historyStartBlock, uint256 rewardPerBlock) public pure returns(uint256) {\\n\\t\\treturn (_block.sub(historyStartBlock)).mul(rewardPerBlock);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction _stakerRewardFromCurrentPeriod(\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerBalance,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\treturn totalRewardInCurrentPeriod\\n\\t\\t\\t.mul(stakerBalance)\\n\\t\\t\\t.div(totalStakingUnits);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriod(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.unsafeGetRewardsFromRange(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number\\n\\t\\t);\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the reward from current period\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromCurrentPeriod(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\tbool excludeLast\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\t\\tuint256\\ttotalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number.sub(1)\\n\\t\\t);\\n\\n\\n\\t\\treturn _stakerRewardFromCurrentPeriod(\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\tstakerBalance,\\n\\t\\t\\tstakingInfo.totalStakingUnits\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards acumulated till now\\n\\t*/\\n\\tfunction getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriod(rewardStreamInfo, stakingInfo, userStakes, stakeIndex);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward.add(historyPeriodReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return the total reward user has accumulated till now for a specific stake\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The total rewards acumulated till now\\n\\t*/\\n\\tfunction _getStakerReward(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentPeriodReward = getStakerRewardFromCurrentPeriod(rewardStreamInfo, stakingInfo, userStakes, stakeIndex, true);\\n\\t\\tuint256 historyPeriodReward = getStakerRewardFromHistory(stakingInfo, userStakes, stakeIndex);\\n\\n\\t\\treturn currentPeriodReward.add(historyPeriodReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Creates a stake instance for the staker\\n\\t* @notice MUST trigger Staked event\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t* @param amountStaked the number of tokens to be staked\\n\\t* @param blockNumber the block number at which the stake is created\\n\\t* @param lockDuration the duration for which the tokens will be locked\\n\\t*/\\n\\tfunction addStake(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 amountStaked,\\n\\t\\tuint256 stakingUnits,\\n\\t\\tuint256 blockNumber,\\n\\t\\tuint256 lockDuration\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuserStakes.push(UserStake({\\n\\t\\t\\t\\tamountStaked: amountStaked,\\n\\t\\t\\t\\tstakingUnits: stakingUnits,\\n\\t\\t\\t\\tenteredAtBlock: blockNumber,\\n\\t\\t\\t\\thistoryAverageRewardWhenEntered: stakingInfo.historyAverageReward,\\n\\t\\t\\t\\tticketsMintingRatioWhenEntered: stakingInfo.ticketsMintingRatio,\\n\\t\\t\\t\\tticketsMintingChillPeriodWhenEntered: stakingInfo.ticketsMintingChillPeriod,\\n\\t\\t\\t\\tlockedTill: blockNumber.add(lockDuration),\\n\\t\\t\\t\\trewardCredit: 0,\\n\\t\\t\\t\\tticketsMinted: 0,\\n\\t\\t\\t\\tuserStakedToken: StakingLib.UserStakedToken({\\n\\t\\t\\t\\t\\ttokenAddress: address(0),\\n\\t\\t\\t\\t\\ttokenId: 0\\n\\t\\t\\t\\t})\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake tokens\\n\\t* @notice Optionaly user can stake a NFT token for extra reward\\n\\t* @dev Users wil be able to unstake only after the lock durationn has pased.\\n\\t* @dev The lock duration in the data bytes is required, its the index of the locks array\\n\\t* Should be the fist 32 bytes in the bytes array\\n\\t* @param amount the inumber of tokens to be staked\\n\\t* @param data the bytes containig extra information about the staking\\n\\t* lock duration index: fist 32 bytes (Number) - Required\\n\\t* NFT address: next 20 bytes (address)\\n\\t* NFT tokenId: next 32 bytes (Number)\\n\\t*/\\n\\tfunction stake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\taddress staker,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t\\t(uint256 lockDuration, uint256 lockIndex) = getLockDuration(stakingInfo, data);\\n\\n\\t\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), amount);\\n\\n\\t\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t\\tuint256 durationMultiplier = stakingInfo.locksMultiplier[lockIndex];\\n\\n\\t\\t\\t// when staking without any multiplier, staking units and amount are identical\\n\\t\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits.add(applyPercent(amount, durationMultiplier));\\n\\t\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked.add(amount);\\n\\n\\t\\t\\taddStake(stakingInfo, userStakes, amount, applyPercent(amount, durationMultiplier), block.number, lockDuration);\\n\\n\\t\\t\\tif (data.length >= 84) { // [32, 20. 32] == [index, address, tokenId]\\n\\t\\t\\t\\taddNftToStake(\\n\\t\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\t\\tstakingInfo,\\n\\t\\t\\t\\t\\tuserStakes,\\n\\t\\t\\t\\t\\tuserStakes.length.sub(1),\\n\\t\\t\\t\\t\\tgetTokenAddressFromCalldata(data),\\n\\t\\t\\t\\t\\tgetTokenIdFromCalldata(data)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tclaimTickets(\\n\\t\\t\\t\\tstakingInfo.ticket,\\n\\t\\t\\t\\tuserStakes[userStakes.length.sub(1)], // last stake just created\\n\\t\\t\\t\\tstaker\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the new history reward pot\\n\\t* @param oldHistoryRewardPot the old history reward pot\\n\\t* @param totalRewardInCurrentPeriod the total reward from current period\\n\\t* @param stakerReward the staker reward\\n\\t* @return (uint256) the new history reward pot\\n\\t*/\\n\\tfunction historyRewardPot(\\n\\t\\tuint256 oldHistoryRewardPot,\\n\\t\\tuint256 totalRewardInCurrentPeriod,\\n\\t\\tuint256 stakerReward\\n\\t) public pure returns(uint256) {\\n\\t\\treturn oldHistoryRewardPot\\n\\t\\t\\t.add(totalRewardInCurrentPeriod)\\n\\t\\t\\t.sub(stakerReward);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an uint256\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parse32BytesToUint256(bytes memory data, uint256 from) public pure returns (uint256 parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 32))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse bytes data to get an address\\n\\t* @param data bytes data\\n\\t* @param from from where to start the parsing\\n\\t*/\\n\\tfunction parseBytesToAddress(bytes memory data, uint256 from) public pure returns (address parsed){\\n\\t\\tassembly {parsed := mload(add(add(data, from), 20))}\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the stake index\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed index\\n\\t*/\\n\\tfunction getStakeIndexFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 0);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT address\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (address) the parsed address\\n\\t*/\\n\\tfunction getTokenAddressFromCalldata(bytes memory data) public pure returns (address) {\\n\\t\\treturn parseBytesToAddress(data, 32);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will parse the stake bytes data to get the NFT tokeId\\n\\t* @dev [(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]\\n\\t* @param data bytes from the stake action\\n\\t* @return (uint256) the parsed tokenId\\n\\t*/\\n\\tfunction getTokenIdFromCalldata(bytes memory data) public pure returns (uint256) {\\n\\t\\treturn parse32BytesToUint256(data, 52);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will apply a percentage to a number\\n\\t* @param number The number to multiply\\n\\t* @param percent The percentage to apply\\n\\t* @return (uint256) the operation result\\n\\t*/\\n\\tfunction applyPercent(uint256 number, uint256 percent) public pure returns (uint256) {\\n\\t\\treturn number.mul(percent).div(100);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculates the new History Average Reward\\n\\t* @dev this is called **before** we update history end block\\n\\t* @return uint256 The calculated newHistoryAverageReward\\n\\t*/\\n\\tfunction getNewHistoryAverageReward(\\n\\t\\tuint256 currentPeriodLength,\\n\\t\\tuint256 currentPeriodAverageReward,\\n\\t\\tuint256 currentHistoryLength,\\n\\t\\tuint256 historyStartBlock,\\n\\t\\tuint256 historyAverageReward\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 blockNumber = block.number;\\n\\t\\tuint256 newHistoryLength = uint256(blockNumber).sub(1).sub(historyStartBlock);\\n\\n\\t\\tuint256 fromCurrent = currentPeriodLength.mul(currentPeriodAverageReward);\\n\\t\\tuint256 fromHistory = currentHistoryLength.mul(historyAverageReward);\\n\\n\\t\\tuint256 newHistoryAverageReward = (\\n\\t\\t\\t(fromCurrent).add(fromHistory)\\n\\t\\t)\\n\\t\\t.div(newHistoryLength);\\n\\n\\t\\treturn newHistoryAverageReward;\\n\\t}\\n\\n\\tfunction updateHistoryValues(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 totalRewardInCurrentPeriod = RewardStreamerLib.getRewardAndUpdateCursor(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo.historyEndBlock,\\n\\t\\t\\tblock.number.sub(1)\\n\\t\\t);\\n\\t\\tuint256 currentPeriodAverageReward = getCurrentPeriodAverageReward(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\n\\t\\t// 1. we update the stakingInfo.historyAverageReward with the WEIGHTED average of history reward and current reward\\n\\t\\tstakingInfo.historyAverageReward = getNewHistoryAverageReward(\\n\\t\\t\\tgetCurrentPeriodLength(stakingInfo, true),\\n\\t\\t\\tcurrentPeriodAverageReward,\\n\\t\\t\\tgetHistoryLength(stakingInfo),\\n\\t\\t\\tstakingInfo.historyStartBlock,\\n\\t\\t\\tstakingInfo.historyAverageReward\\n\\t\\t);\\n\\n\\t\\t// 2. we push the currentPeriodReward in the history\\n\\t\\tstakingInfo.historyRewardPot = historyRewardPot(\\n\\t\\t\\t\\tstakingInfo.historyRewardPot,\\n\\t\\t\\t\\ttotalRewardInCurrentPeriod,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t// 3. we update the stakingInfo.historyEndBlock;\\n\\t\\tstakingInfo.historyEndBlock = uint256(block.number).sub(1);\\n\\t}\\n\\n\\tfunction setTicketsMintingRatio(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tuint256 mintingRatio\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tstakingInfo.ticketsMintingRatio = mintingRatio;\\n\\t}\\n\\n  // *****************************\\n\\t// *** UserStakesLib section ***\\n\\t// *****************************\\n\\n\\tstruct UserStakedToken {\\n\\t\\taddress tokenAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\tstruct UserStake {\\n\\t\\tuint256 stakingUnits;\\n\\t\\tuint256 amountStaked;\\n\\t\\tuint256 enteredAtBlock;\\n\\t\\tuint256 historyAverageRewardWhenEntered;\\n\\t\\tuint256 ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 lockedTill;\\n\\t\\tuint256 rewardCredit;\\n\\t\\tuint256 ticketsMinted;\\n\\t\\tUserStakedToken userStakedToken;\\n\\t}\\n\\n\\tfunction getTotalStakedFor(\\n\\t\\tUserStake[] storage userStakes\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 total;\\n\\n\\t\\tfor (uint i = 0; i < userStakes.length; i++) {\\n\\t\\t\\ttotal = total.add(userStakes[i].amountStaked);\\n\\t\\t}\\n\\n\\t\\treturn total;\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Calculate the staker time in history\\n\\t* @return (uint256) number of blocks in history\\n\\t*/\\n\\tfunction getStakerTimeInHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].enteredAtBlock == 0 || userStakes[stakeIndex].enteredAtBlock > stakingInfo.historyEndBlock) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn stakingInfo.historyEndBlock.sub(userStakes[stakeIndex].enteredAtBlock).add(1);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will calculate and return what the history length was a the moment the stake was created\\n\\t* @param stakeIndex the index of the stake\\n\\t* @return (uint256) The length of the history\\n\\t*/\\n\\tfunction getHistoryLengthBeforeStakerEntered(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 enteredAtBlock = userStakes[stakeIndex].enteredAtBlock;\\n\\n\\t\\tif (enteredAtBlock == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn enteredAtBlock.sub(stakingInfo.historyStartBlock).sub(1);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the user share in the pool\\n\\t* @param totalStakingUnits sum of all user stake shares\\n\\t* @return (uint256) the calculater pool share\\n\\t*/\\n\\tfunction userPoolShare(\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\tuint256 totalStakingUnits\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length || userStakes[stakeIndex].stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakerBalance = userStakes[stakeIndex].stakingUnits;\\n\\n\\t\\treturn stakerBalance.mul(10**18).div(totalStakingUnits);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the history average for staker\\n\\t* @return (uint256) the calculated average\\n\\t*/\\n\\tfunction getHistoryAverageForStaker(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 historyAverageRewardWhenEntered = userStakes[stakeIndex].historyAverageRewardWhenEntered;\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\tif(blocksParticipatedInHistory == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyLength = getHistoryLength(stakingInfo);\\n\\n\\t\\tuint256 historyLengthBeforeStakerEntered = getHistoryLengthBeforeStakerEntered(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn stakingInfo.historyAverageReward\\n\\t\\t\\t.mul(historyLength)\\n\\t\\t\\t.sub(\\n\\t\\t\\t\\thistoryAverageRewardWhenEntered.mul(historyLengthBeforeStakerEntered)\\n\\t\\t\\t).div(blocksParticipatedInHistory);\\n\\n\\t}\\n\\n\\t/**\\n\\t* @notice Calculate the stake reward from history\\n\\t* @return (uint256) the calculater reward\\n\\t*/\\n\\tfunction getStakerRewardFromHistory(\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns(uint256)\\n\\t{\\n\\t\\tif (stakeIndex >= userStakes.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 stakingUnits = userStakes[stakeIndex].stakingUnits;\\n\\t\\tif (stakingUnits == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 historyAverageForStaker = getHistoryAverageForStaker(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\t\\tuint256 blocksParticipatedInHistory = getStakerTimeInHistory(\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\t\\treturn blocksParticipatedInHistory\\n\\t\\t\\t.mul(historyAverageForStaker)\\n\\t\\t\\t.mul(stakingUnits)\\n\\t\\t\\t.div(10 ** 18);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The NFT should be in the rarityRegister\\n\\t* @dev For each stake you can have only one NFT staked\\n\\t*/\\n\\tfunction _addNftToStakeAndApplyMultiplier(\\n\\t\\taddress rarityRegister,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tprivate\\n\\t{\\n\\t\\tuint256 rewardMultiplier = INFTRarityRegister(rarityRegister).getNftRarity(tokenAddress, tokenId);\\n\\n\\t\\trequire(rewardMultiplier > 0, 'Staking: NFT not found in RarityRegister');\\n\\t\\trequire(rewardMultiplier >= 100, 'Staking: NFT multiplier must be at least 100');\\n\\t\\trequire(\\n\\t\\t\\tuserStake.userStakedToken.tokenAddress == address(0),\\n\\t\\t\\t'Staking: Stake already has a token'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuserStake.lockedTill > block.number,\\n\\t\\t\\t'Staking: cannot add NFT to unlocked stakes'\\n\\t\\t);\\n\\n\\n\\t\\tuint userStakingUnits = userStake.stakingUnits;\\n\\n\\t\\tbool success = TokenHelper.transferFrom(tokenAddress, tokenId, msg.sender, address(this));\\n\\n\\t\\trequire(success, \\\"Staking: could not add NFT to stake\\\");\\n\\n\\t\\tuserStake.userStakedToken.tokenAddress = tokenAddress;\\n\\t\\tuserStake.userStakedToken.tokenId = tokenId;\\n\\n\\t\\tuserStake.stakingUnits = applyPercent(userStakingUnits, rewardMultiplier);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Allows user to stake an nft to an existing stake for extra reward\\n\\t* @dev The stake should exist\\n\\t* @dev when adding the NFT we need to simulate an untake/stake because we need to recalculate the\\n\\t* new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot\\n\\t* @notice it MUST revert if the added token has no multiplier\\n\\t*/\\n\\tfunction addNftToStake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 tokenId\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 previousStakingUnits = userStakes[stakeIndex].stakingUnits; // this stays the same\\n\\t\\trequire(previousStakingUnits > 0, \\\"Staking: Stake not found\\\");\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t_addNftToStakeAndApplyMultiplier(\\n\\t\\t\\tstakingInfo.rarityRegister,\\n\\t\\t\\tuserStakes[stakeIndex],\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\n\\t\\tuint256 newStakingUnits = userStakes[stakeIndex].stakingUnits; // after we just update it\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\t// we bring the stake to the current time\\n\\t\\tuserStakes[stakeIndex].enteredAtBlock = block.number;\\n\\t\\tuserStakes[stakeIndex].historyAverageRewardWhenEntered = stakingInfo.historyAverageReward;\\n\\t\\tuserStakes[stakeIndex].rewardCredit = stakerReward;\\n\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits\\n\\t\\t\\t.sub(previousStakingUnits)\\n\\t\\t\\t.add(newStakingUnits);\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot.sub(stakerReward);\\n\\t}\\n\\n\\tfunction _resetStake(UserStake storage userStake) private {\\n\\t\\tuserStake.stakingUnits = 0;\\n\\t\\tuserStake.rewardCredit = 0;\\n\\t\\tuserStake.amountStaked = 0;\\n\\t\\tuserStake.enteredAtBlock = 0;\\n\\t\\tuserStake.lockedTill = 0;\\n\\t\\tuserStake.ticketsMintingRatioWhenEntered = 0;\\n\\t\\tuserStake.historyAverageRewardWhenEntered = 0;\\n\\t\\tuserStake.ticketsMintingChillPeriodWhenEntered = 0;\\n\\t}\\n\\n\\n\\t/**\\n\\t* @notice Remove the preveusly staked NFT from the stake\\n\\t* @param staker the address of the owner of the stake\\n\\t*/\\n\\tfunction removeNftFromStake(\\n\\t\\tUserStakedToken storage userStakedToken,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tif (userStakedToken.tokenAddress != address(0)) {\\n\\t\\t\\tuint256 tokenId = userStakedToken.tokenId;\\n\\t\\t\\taddress tokenAddress = userStakedToken.tokenAddress;\\n\\n\\t\\t\\tTokenHelper.transferFrom(tokenAddress, tokenId, address(this), staker);\\n\\t\\t}\\n\\t}\\n\\n\\t\\t/**\\n\\t* @notice Allows user to unstake the staked tokens\\n\\t* @notice The tokens are allowed to be unstaked only after the lock duration has passed\\n\\t* @notice MUST trigger Unstaked event\\n\\t* @dev Unstaking tokens is an atomic operation\\u2014either all of the tokens in a stake, or none of the tokens.\\n\\t* @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\\n\\t*   transferred back to their account, and their personalStakeIndex will increment to the next active stake.\\n\\t* @return uint256 The number of tokens unstaked\\n\\t*/\\n\\tfunction unstake(\\n\\t\\tRewardStreamerLib.RewardStreamInfo storage rewardStreamInfo,\\n\\t\\tStakingInfo storage stakingInfo,\\n\\t\\tUserStake[] storage userStakes,\\n\\t\\tuint256 stakeIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(stakeIndex < userStakes.length, 'Staking: Nothing to unstake');\\n\\n\\t\\trequire(userStakes[stakeIndex].lockedTill < block.number, \\\"Staking: Stake is still locked\\\");\\n\\t\\trequire(userStakes[stakeIndex].amountStaked != 0, 'Staking: Nothing to unstake');\\n\\n\\t\\tuint256 stakerReward = _getStakerReward(\\n\\t\\t\\trewardStreamInfo,\\n\\t\\t\\tstakingInfo,\\n\\t\\t\\tuserStakes,\\n\\t\\t\\tstakeIndex\\n\\t\\t);\\n\\n\\n\\t\\t// if for any reason the transfer fails, it will fail silently\\n\\t\\t// and token can be withdrawn when error disappears\\n\\t\\tremoveNftFromStake(userStakes[stakeIndex].userStakedToken, msg.sender);\\n\\n\\n\\t\\tuint256 totalAmount = stakerReward\\n\\t\\t\\t.add(userStakes[stakeIndex].amountStaked)\\n\\t\\t\\t.add(userStakes[stakeIndex].rewardCredit);\\n\\n\\t\\tTokenHelper.ERC20Transfer(rewardStreamInfo.rewardToken, address(msg.sender), totalAmount);\\n\\n\\t\\tupdateHistoryValues(rewardStreamInfo, stakingInfo);\\n\\n\\t\\tstakingInfo.totalDistributedRewards = stakingInfo.totalDistributedRewards.add(stakerReward).add(userStakes[stakeIndex].rewardCredit);\\n\\t\\tstakingInfo.totalCurrentlyStaked = stakingInfo.totalCurrentlyStaked.sub(userStakes[stakeIndex].amountStaked);\\n\\t\\tstakingInfo.totalStakingUnits = stakingInfo.totalStakingUnits.sub(userStakes[stakeIndex].stakingUnits);\\n\\n\\t\\tclaimTickets(stakingInfo.ticket, userStakes[stakeIndex], msg.sender);\\n\\t\\t_resetStake(userStakes[stakeIndex]);\\n\\n\\t\\tstakingInfo.historyRewardPot = stakingInfo.historyRewardPot.sub(stakerReward);\\n\\n\\t\\treturn stakerReward;\\n\\t}\\n\\n\\tfunction getClaimableTickets(\\n\\t\\tUserStake storage userStake\\n\\t)\\n\\t\\tpublic\\n\\t  view\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 stakingUnits = userStake.stakingUnits;\\n\\t\\tuint256 ticketsMintingChillPeriod = userStake.ticketsMintingChillPeriodWhenEntered;\\n\\t\\tuint256 ticketsMintingRatio = userStake.ticketsMintingRatioWhenEntered;\\n\\t\\tuint256 ticketsMinted = userStake.ticketsMinted;\\n\\n\\t\\tif(stakingUnits == 0 || ticketsMintingRatio == 0 || ticketsMintingChillPeriod == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t// 2. get chilling period length\\n\\t\\t// 3. check how many periods have passed\\n\\t\\tuint256 enteredAtBlock = userStake.enteredAtBlock;\\n\\t\\tuint256 lockedTill = userStake.lockedTill;\\n\\t\\t// 4. prevent minting more tickets after stake is unlocked\\n\\n\\t\\tuint256 blocksDelta = Math.min(\\n\\t\\t\\t(uint256(block.number).sub(enteredAtBlock)),\\n\\t\\t\\t(lockedTill.sub(enteredAtBlock))\\n\\t\\t).add(ticketsMintingChillPeriod); // count as passed from day 0\\n\\t\\tuint256 periodsPassed = blocksDelta.div(ticketsMintingChillPeriod);\\n\\t\\t// 4. multiply tickets\\n\\t\\tuint256 multipliedUnits = stakingUnits.mul(periodsPassed);\\n\\t\\t// 5. get printable tickets\\n\\t\\tuint256 printableTickets = multipliedUnits.div(ticketsMintingRatio);\\n\\t\\t// 6. subtract any previously minted\\n\\t\\tuint256 netPrintableTickets = printableTickets.sub(ticketsMinted);\\n\\t\\t// 5. don't print more tickets after stake is unlocked\\n\\t\\treturn netPrintableTickets;\\n \\t}\\n\\n\\t/**\\n\\t* @notice Mint tickets to the staker\\n\\t* @notice The amount of tickets depends on the amount of tokens staked and the duration the tokens a locked for.\\n\\t* @param ticket the address of the ticket instance\\n\\t* @param userStake the stake to claim tickets from\\n\\t* @param staker the address fo the staker\\n\\t*/\\n\\tfunction claimTickets(\\n\\t\\taddress ticket,\\n\\t\\tUserStake storage userStake,\\n\\t\\taddress staker\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\tuint256 netPrintableTickets = getClaimableTickets(userStake);\\n\\n\\t\\tif(netPrintableTickets > 0) {\\n\\t\\t\\t \\n\\t\\t\\tTokenHelper._mintTickets(ticket, staker, netPrintableTickets);\\n\\t\\t\\tuserStake.ticketsMinted = userStake.ticketsMinted.add(netPrintableTickets);\\n\\t\\t}\\n \\t}\\n}\",\"keccak256\":\"0x6cde360b24e06487a48c4ae8ac30fc94fc0a7eb8b91918a79d3619ba48f06b24\",\"license\":\"MIT\"},\"contracts/Staking/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                (, bytes memory data) = token\\n                    .call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\\n\\n                return abi.decode(data, (address)) == address(this);\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n    }\\n}\",\"keccak256\":\"0xf6c8bcd2f81b9f551d69694149d66db1619f9663e334a679c42188f43933720d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101e45760003560e01c80639c2cbc8d1161010e578063c668e345116100ac578063e64a80e81161007b578063e64a80e8146106ae578063e6c8af4b146106d7578063f58dd31c14610700578063fd9d95ce14610730576101e4565b8063c668e345146105f5578063ca72a6fd14610625578063d85b41f614610655578063dd21807814610685576101e4565b8063bba44c9b116100e8578063bba44c9b14610534578063bcb4969214610564578063c0318f9a14610594578063c157f480146105c4576101e4565b80639c2cbc8d146104ab5780639c8ba815146104db5780639e5236501461050b576101e4565b80637946fbde116101865780638714b767116101555780638714b767146103eb5780638c138d071461041b5780638f3b32781461044b5780639ac9e04a1461047b576101e4565b80637946fbde14610332578063795737b5146103625780637a54ff411461038b5780637bc0bc92146103bb576101e4565b806355facecf116101c257806355facecf14610279578063607082a3146102a957806360fa09dd146102d9578063653e5d2614610302576101e4565b806313889500146101e95780631dccbf87146102195780632861e3e214610249575b600080fd5b61020360048036038101906101fe9190612c96565b61076d565b6040516102109190613605565b60405180910390f35b610233600480360381019061022e9190612c96565b610791565b6040516102409190613605565b60405180910390f35b610263600480360381019061025e9190612a73565b6107b1565b6040516102709190613389565b60405180910390f35b610293600480360381019061028e9190612baa565b6107c2565b6040516102a09190613605565b60405180910390f35b6102c360048036038101906102be9190612cbf565b6108d6565b6040516102d09190613605565b60405180910390f35b8180156102e557600080fd5b5061030060048036038101906102fb9190612d9e565b6109d5565b005b61031c60048036038101906103179190612eb7565b6109e2565b6040516103299190613605565b60405180910390f35b61034c60048036038101906103479190612e29565b610a12565b6040516103599190613605565b60405180910390f35b81801561036e57600080fd5b5061038960048036038101906103849190612ac7565b610b29565b005b6103a560048036038101906103a09190612baa565b610c48565b6040516103b29190613605565b60405180910390f35b6103d560048036038101906103d09190612a32565b610c87565b6040516103e29190613605565b60405180910390f35b61040560048036038101906104009190612dda565b610c9b565b6040516104129190613605565b60405180910390f35b61043560048036038101906104309190612d0e565b610d21565b6040516104429190613605565b60405180910390f35b61046560048036038101906104609190612cbf565b610d5b565b6040516104729190613605565b60405180910390f35b61049560048036038101906104909190612991565b610e9e565b6040516104a29190613605565b60405180910390f35b6104c560048036038101906104c091906129ba565b610f2c565b6040516104d29190613605565b60405180910390f35b6104f560048036038101906104f09190612a73565b611020565b6040516105029190613605565b60405180910390f35b81801561051757600080fd5b50610532600480360381019061052d9190612942565b611031565b005b61054e60048036038101906105499190612ef3565b6110d8565b60405161055b9190613605565b60405180910390f35b61057e60048036038101906105799190612ef3565b611108565b60405161058b9190613605565b60405180910390f35b6105ae60048036038101906105a99190612f42565b611138565b6040516105bb9190613605565b60405180910390f35b6105de60048036038101906105d99190612d4a565b6111d0565b6040516105ec929190613620565b60405180910390f35b61060f600480360381019061060a9190612a32565b6112c2565b60405161061c9190613605565b60405180910390f35b61063f600480360381019061063a9190612cbf565b6112d6565b60405161064c9190613605565b60405180910390f35b61066f600480360381019061066a9190612cbf565b6113b8565b60405161067c9190613605565b60405180910390f35b81801561069157600080fd5b506106ac60048036038101906106a79190612e52565b611450565b005b8180156106ba57600080fd5b506106d560048036038101906106d09190612c0d565b61156f565b005b8180156106e357600080fd5b506106fe60048036038101906106f99190612b03565b61182c565b005b61071a60048036038101906107159190612a32565b611b26565b6040516107279190613389565b60405180910390f35b81801561073c57600080fd5b5061075760048036038101906107529190612baa565b611b3a565b6040516107649190613605565b60405180910390f35b600061078a8260000154836001015461209290919063ffffffff16565b9050919050565b60006107aa82600101544361209290919063ffffffff16565b9050919050565b600060148284010151905092915050565b6000828054905082106107d857600090506108ce565b6000838381548110610813577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600001549050600073__$8a1be47e59849b3a56075319f035db0fe2$__63c02ceb0a888860010154436040518463ffffffff1660e01b8152600401610868939291906135ce565b60206040518083038186803b15801561088057600080fd5b505af4158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190612e8e565b90506108c9818388600501546120a8565b925050505b949350505050565b6000828054905082106108ec57600090506109ce565b6000838381548110610927577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016003015490506000610948868686610d5b565b9050600081141561095e576000925050506109ce565b60006109698761076d565b905060006109788888886113b8565b90506109c7836109b961099484886120d890919063ffffffff16565b6109ab868d600201546120d890919063ffffffff16565b61209290919063ffffffff16565b6120ee90919063ffffffff16565b9450505050505b9392505050565b8082600901819055505050565b6000610a0a60646109fc84866120d890919063ffffffff16565b6120ee90919063ffffffff16565b905092915050565b600080826000015490506000836005015490506000846004015490506000856008015490506000841480610a465750600082145b80610a515750600083145b15610a63576000945050505050610b24565b6000866002015490506000876006015490506000610ab786610aa9610a91864361209290919063ffffffff16565b610aa4878761209290919063ffffffff16565b612104565b61211d90919063ffffffff16565b90506000610ace87836120ee90919063ffffffff16565b90506000610ae5828a6120d890919063ffffffff16565b90506000610afc88836120ee90919063ffffffff16565b90506000610b13888361209290919063ffffffff16565b9050809b5050505050505050505050505b919050565b600073__$8a1be47e59849b3a56075319f035db0fe2$__633a09889a848460010154610b5f60014361209290919063ffffffff16565b6040518463ffffffff1660e01b8152600401610b7d939291906135ce565b60206040518083038186803b158015610b9557600080fd5b505af4158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190612e8e565b90506000610bdd83836001610c9b565b9050610c06610bed846001610d21565b82610bf78661076d565b86600001548760020154611138565b8360020181905550610c1e83600301548360006110d8565b8360030181905550610c3a60014361209290919063ffffffff16565b836001018190555050505050565b600080610c57868686866107c2565b90506000610c668686866112d6565b9050610c7b818361211d90919063ffffffff16565b92505050949350505050565b6000610c94826000611020565b9050919050565b60008084600501541415610cb25760009050610d1a565b6000610cbe8584610d21565b90506000811415610cd3576000915050610d1a565b610d1681610d088760050154610cfa670de0b6b3a7640000896120d890919063ffffffff16565b6120ee90919063ffffffff16565b6120ee90919063ffffffff16565b9150505b9392505050565b600081610d3657610d3183610791565b610d53565b610d526001610d4485610791565b61209290919063ffffffff16565b5b905092915050565b6000828054905082101580610dba57506000838381548110610da6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160020154145b80610e1257508360010154838381548110610dfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160020154115b15610e205760009050610e97565b610e946001610e86858581548110610e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160020154876001015461209290919063ffffffff16565b61211d90919063ffffffff16565b90505b9392505050565b60008060005b8380549050811015610f2257610f0d848281548110610eec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600101548361211d90919063ffffffff16565b91508080610f1a90613866565b915050610ea4565b5080915050919050565b6000838054905083101580610f8b57506000848481548110610f77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160000154145b15610f995760009050611019565b6000848481548110610fd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160000154905061101583611007670de0b6b3a7640000846120d890919063ffffffff16565b6120ee90919063ffffffff16565b9150505b9392505050565b600060208284010151905092915050565b600061103c83610a12565b905060008111156110d25773__$11791ee3c30036632c128bd6c5593b6470$__635043eee68584846040518463ffffffff1660e01b8152600401611082939291906133e9565b60006040518083038186803b15801561109a57600080fd5b505af41580156110ae573d6000803e3d6000fd5b505050506110c981846008015461211d90919063ffffffff16565b83600801819055505b50505050565b60006110ff826110f1858761211d90919063ffffffff16565b61209290919063ffffffff16565b90509392505050565b600061112f82611121858761209290919063ffffffff16565b6120d890919063ffffffff16565b90509392505050565b60008043905060006111668561115860018561209290919063ffffffff16565b61209290919063ffffffff16565b9050600061117d888a6120d890919063ffffffff16565b9050600061119486896120d890919063ffffffff16565b905060006111bd846111af848661211d90919063ffffffff16565b6120ee90919063ffffffff16565b9050809550505050505095945050505050565b600080602083511015611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f9061352e565b60405180910390fd5b600061122384610c87565b90508460070180549050811061126e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112659061354e565b60405180910390fd5b8460070181815481106112aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548192509250509250929050565b60006112cf826034611020565b9050919050565b6000828054905082106112ec57600090506113b1565b6000838381548110611327577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600001549050600081141561134e5760009150506113b1565b600061135b8686866108d6565b9050600061136a878787610d5b565b90506113ab670de0b6b3a764000061139d8561138f86866120d890919063ffffffff16565b6120d890919063ffffffff16565b6120ee90919063ffffffff16565b93505050505b9392505050565b6000808383815481106113f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600201549050600081141561141b576000915050611449565b611445600161143787600001548461209290919063ffffffff16565b61209290919063ffffffff16565b9150505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461156b5760008260010154905060008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905073__$11791ee3c30036632c128bd6c5593b6470$__639059b154828430876040518563ffffffff1660e01b81526004016115179493929190613449565b60206040518083038186803b15801561152f57600080fd5b505af4158015611543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190612a09565b5050505b5050565b60008484815481106115aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160000154905060008111611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f8906134ae565b60405180910390fd5b600061160f88888888612133565b905061168787600c0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878781548110611672577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02018686612174565b60008686815481106116c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016000015490506116e08989610b29565b4387878154811061171a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160020181905550876002015487878154811061176d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160030181905550818787815481106117bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600701819055506117fa816117ec858b6005015461209290919063ffffffff16565b61211d90919063ffffffff16565b886005018190555061181982896003015461209290919063ffffffff16565b8860030181905550505050505050505050565b60008061187d8885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506111d0565b9150915073__$11791ee3c30036632c128bd6c5593b6470$__63a1c011248a60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330896040518563ffffffff1660e01b81526004016118e294939291906133a4565b60006040518083038186803b1580156118fa57600080fd5b505af415801561190e573d6000803e3d6000fd5b5050505061191c8989610b29565b600088600801828154811061195a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905061198761197487836109e2565b8a6005015461211d90919063ffffffff16565b89600501819055506119a6868a6004015461211d90919063ffffffff16565b89600401819055506119c58989886119be8a866109e2565b43886124b0565b60548585905010611a8e57611a8d8a8a8a6119ee60018d8054905061209290919063ffffffff16565b611a3b8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b26565b611a888b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506112c2565b61156f565b5b611b1a89600b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689611acf60018c8054905061209290919063ffffffff16565b81548110611b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020189611031565b50505050505050505050565b6000611b338260206107b1565b9050919050565b600082805490508210611b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b79906134ce565b60405180910390fd5b43838381548110611bbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b02016006015410611c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c059061348e565b60405180910390fd5b6000838381548110611c49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600101541415611c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c93906134ce565b60405180910390fd5b6000611caa86868686612133565b9050611cff848481548110611ce8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160090133611450565b6000611dba858581548110611d3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160070154611dac878781548110611d8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600101548561211d90919063ffffffff16565b61211d90919063ffffffff16565b905073__$11791ee3c30036632c128bd6c5593b6470$__63e59fdd368860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401611e1b939291906133e9565b60006040518083038186803b158015611e3357600080fd5b505af4158015611e47573d6000803e3d6000fd5b50505050611e558787610b29565b611ec8858581548110611e91577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160070154611eba84896006015461211d90919063ffffffff16565b61211d90919063ffffffff16565b8660060181905550611f31858581548110611f0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160010154876004015461209290919063ffffffff16565b8660040181905550611f9a858581548110611f75577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020160000154876005015461209290919063ffffffff16565b866005018190555061201786600b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868681548110612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020133611031565b612066858581548110612053577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b020161262e565b61207d82876003015461209290919063ffffffff16565b86600301819055508192505050949350505050565b600081836120a0919061379c565b905092915050565b60006120cf826120c185876120d890919063ffffffff16565b6120ee90919063ffffffff16565b90509392505050565b600081836120e69190613742565b905092915050565b600081836120fc9190613711565b905092915050565b60008183106121135781612115565b825b905092915050565b6000818361212b91906136bb565b905092915050565b600080612144868686866001612681565b905060006121538686866112d6565b9050612168818361211d90919063ffffffff16565b92505050949350505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663fe6f249b84846040518363ffffffff1660e01b81526004016121b1929190613420565b60206040518083038186803b1580156121c957600080fd5b505afa1580156121dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122019190612fb9565b60ff16905060008111612249576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612240906135ae565b60405180910390fd5b606481101561228d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122849061358e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168460090160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a906134ee565b60405180910390fd5b43846006015411612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123609061350e565b60405180910390fd5b600084600001549050600073__$11791ee3c30036632c128bd6c5593b6470$__639059b154868633306040518563ffffffff1660e01b81526004016123b19493929190613449565b60206040518083038186803b1580156123c957600080fd5b505af41580156123dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124019190612a09565b905080612443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243a9061356e565b60405180910390fd5b848660090160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083866009016001018190555061249f82846109e2565b866000018190555050505050505050565b84604051806101400160405280858152602001868152602001848152602001886002015481526020018860090154815260200188600a01548152602001612500848661211d90919063ffffffff16565b815260200160008152602001600081526020016040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525081525090806001815401808255809150506001900390600052602060002090600b0201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550505050505050505050565b600081600001819055506000816007018190555060008160010181905550600081600201819055506000816006018190555060008160040181905550600081600301819055506000816005018190555050565b60008380549050831061269757600090506127a0565b60008484815481106126d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600b0201600001549050600073__$8a1be47e59849b3a56075319f035db0fe2$__633a09889a89896001015461271c60014361209290919063ffffffff16565b6040518463ffffffff1660e01b815260040161273a939291906135ce565b60206040518083038186803b15801561275257600080fd5b505af4158015612766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278a9190612e8e565b905061279b818389600501546120a8565b925050505b95945050505050565b60006127bc6127b78461367a565b613649565b9050828152602081018484840111156127d457600080fd5b6127df848285613857565b509392505050565b6000813590506127f68161393c565b92915050565b60008135905061280b81613953565b92915050565b6000813590506128208161396a565b92915050565b6000815190506128358161396a565b92915050565b60008083601f84011261284d57600080fd5b8235905067ffffffffffffffff81111561286657600080fd5b60208301915083600182028301111561287e57600080fd5b9250929050565b600082601f83011261289657600080fd5b81356128a68482602086016127a9565b91505092915050565b6000813590506128be81613981565b92915050565b6000813590506128d381613998565b92915050565b6000813590506128e8816139af565b92915050565b6000813590506128fd816139c6565b92915050565b600081359050612912816139dd565b92915050565b600081519050612927816139dd565b92915050565b60008151905061293c816139f4565b92915050565b60008060006060848603121561295757600080fd5b6000612965868287016127e7565b9350506020612976868287016128d9565b9250506040612987868287016127e7565b9150509250925092565b6000602082840312156129a357600080fd5b60006129b1848285016127fc565b91505092915050565b6000806000606084860312156129cf57600080fd5b60006129dd868287016127fc565b93505060206129ee86828701612903565b92505060406129ff86828701612903565b9150509250925092565b600060208284031215612a1b57600080fd5b6000612a2984828501612826565b91505092915050565b600060208284031215612a4457600080fd5b600082013567ffffffffffffffff811115612a5e57600080fd5b612a6a84828501612885565b91505092915050565b60008060408385031215612a8657600080fd5b600083013567ffffffffffffffff811115612aa057600080fd5b612aac85828601612885565b9250506020612abd85828601612903565b9150509250929050565b60008060408385031215612ada57600080fd5b6000612ae8858286016128af565b9250506020612af9858286016128c4565b9150509250929050565b600080600080600080600060c0888a031215612b1e57600080fd5b6000612b2c8a828b016128af565b9750506020612b3d8a828b016128c4565b9650506040612b4e8a828b016127fc565b9550506060612b5f8a828b016127e7565b9450506080612b708a828b01612903565b93505060a088013567ffffffffffffffff811115612b8d57600080fd5b612b998a828b0161283b565b925092505092959891949750929550565b60008060008060808587031215612bc057600080fd5b6000612bce878288016128af565b9450506020612bdf878288016128c4565b9350506040612bf0878288016127fc565b9250506060612c0187828801612903565b91505092959194509250565b60008060008060008060c08789031215612c2657600080fd5b6000612c3489828a016128af565b9650506020612c4589828a016128c4565b9550506040612c5689828a016127fc565b9450506060612c6789828a01612903565b9350506080612c7889828a016127e7565b92505060a0612c8989828a01612903565b9150509295509295509295565b600060208284031215612ca857600080fd5b6000612cb6848285016128c4565b91505092915050565b600080600060608486031215612cd457600080fd5b6000612ce2868287016128c4565b9350506020612cf3868287016127fc565b9250506040612d0486828701612903565b9150509250925092565b60008060408385031215612d2157600080fd5b6000612d2f858286016128c4565b9250506020612d4085828601612811565b9150509250929050565b60008060408385031215612d5d57600080fd5b6000612d6b858286016128c4565b925050602083013567ffffffffffffffff811115612d8857600080fd5b612d9485828601612885565b9150509250929050565b60008060408385031215612db157600080fd5b6000612dbf858286016128c4565b9250506020612dd085828601612903565b9150509250929050565b600080600060608486031215612def57600080fd5b6000612dfd868287016128c4565b9350506020612e0e86828701612903565b9250506040612e1f86828701612811565b9150509250925092565b600060208284031215612e3b57600080fd5b6000612e49848285016128d9565b91505092915050565b60008060408385031215612e6557600080fd5b6000612e73858286016128ee565b9250506020612e84858286016127e7565b9150509250929050565b600060208284031215612ea057600080fd5b6000612eae84828501612918565b91505092915050565b60008060408385031215612eca57600080fd5b6000612ed885828601612903565b9250506020612ee985828601612903565b9150509250929050565b600080600060608486031215612f0857600080fd5b6000612f1686828701612903565b9350506020612f2786828701612903565b9250506040612f3886828701612903565b9150509250925092565b600080600080600060a08688031215612f5a57600080fd5b6000612f6888828901612903565b9550506020612f7988828901612903565b9450506040612f8a88828901612903565b9350506060612f9b88828901612903565b9250506080612fac88828901612903565b9150509295509295909350565b600060208284031215612fcb57600080fd5b6000612fd98482850161292d565b91505092915050565b612feb816137d0565b82525050565b612ffa816137d0565b82525050565b600061300d601e836136aa565b91507f5374616b696e673a205374616b65206973207374696c6c206c6f636b656400006000830152602082019050919050565b600061304d6018836136aa565b91507f5374616b696e673a205374616b65206e6f7420666f756e6400000000000000006000830152602082019050919050565b600061308d601b836136aa565b91507f5374616b696e673a204e6f7468696e6720746f20756e7374616b6500000000006000830152602082019050919050565b60006130cd6022836136aa565b91507f5374616b696e673a205374616b6520616c726561647920686173206120746f6b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613133602a836136aa565b91507f5374616b696e673a2063616e6e6f7420616464204e465420746f20756e6c6f6360008301527f6b6564207374616b6573000000000000000000000000000000000000000000006020830152604082019050919050565b60006131996027836136aa565b91507f5374616b653a20646174612073686f756c64206279206174206c65617374203360008301527f32206279746573000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006131ff601f836136aa565b91507f5374616b653a206c6f636b20696e646578206f7574206f6620626f756e6473006000830152602082019050919050565b600061323f6023836136aa565b91507f5374616b696e673a20636f756c64206e6f7420616464204e465420746f20737460008301527f616b6500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006132a5602c836136aa565b91507f5374616b696e673a204e4654206d756c7469706c696572206d7573742062652060008301527f6174206c656173742031303000000000000000000000000000000000000000006020830152604082019050919050565b600061330b6028836136aa565b91507f5374616b696e673a204e4654206e6f7420666f756e6420696e2052617269747960008301527f52656769737465720000000000000000000000000000000000000000000000006020830152604082019050919050565b8082525050565b61337481613840565b82525050565b61338381613840565b82525050565b600060208201905061339e6000830184612ff1565b92915050565b60006080820190506133b96000830187612ff1565b6133c66020830186612ff1565b6133d36040830185612ff1565b6133e0606083018461337a565b95945050505050565b60006060820190506133fe6000830186612ff1565b61340b6020830185612ff1565b613418604083018461337a565b949350505050565b60006040820190506134356000830185612fe2565b613442602083018461336b565b9392505050565b600060808201905061345e6000830187612ff1565b61346b602083018661337a565b6134786040830185612ff1565b6134856060830184612ff1565b95945050505050565b600060208201905081810360008301526134a781613000565b9050919050565b600060208201905081810360008301526134c781613040565b9050919050565b600060208201905081810360008301526134e781613080565b9050919050565b60006020820190508181036000830152613507816130c0565b9050919050565b6000602082019050818103600083015261352781613126565b9050919050565b600060208201905081810360008301526135478161318c565b9050919050565b60006020820190508181036000830152613567816131f2565b9050919050565b6000602082019050818103600083015261358781613232565b9050919050565b600060208201905081810360008301526135a781613298565b9050919050565b600060208201905081810360008301526135c7816132fe565b9050919050565b60006060820190506135e36000830186613364565b6135f0602083018561337a565b6135fd604083018461337a565b949350505050565b600060208201905061361a600083018461337a565b92915050565b6000604082019050613635600083018561337a565b613642602083018461337a565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156136705761366f61390d565b5b8060405250919050565b600067ffffffffffffffff8211156136955761369461390d565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b60006136c682613840565b91506136d183613840565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613706576137056138af565b5b828201905092915050565b600061371c82613840565b915061372783613840565b925082613737576137366138de565b5b828204905092915050565b600061374d82613840565b915061375883613840565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613791576137906138af565b5b828202905092915050565b60006137a782613840565b91506137b283613840565b9250828210156137c5576137c46138af565b5b828203905092915050565b60006137db82613820565b9050919050565b6000819050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b600061387182613840565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138a4576138a36138af565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613945816137d0565b811461395057600080fd5b50565b61395c816137e2565b811461396757600080fd5b50565b613973816137ec565b811461397e57600080fd5b50565b61398a816137f8565b811461399557600080fd5b50565b6139a181613802565b81146139ac57600080fd5b50565b6139b88161380c565b81146139c357600080fd5b50565b6139cf81613816565b81146139da57600080fd5b50565b6139e681613840565b81146139f157600080fd5b50565b6139fd8161384a565b8114613a0857600080fd5b5056fea26469706673582212209d29ce2e52dbe218bc829acebe65b91b00bd0699e369a899f9181cbe65119c3b64736f6c63430008000033",
  "libraries": {
    "TokenHelper": "0x4bba64b19dfef99994BD40B7C7e2D4C70CfB95FD",
    "RewardStreamerLib": "0xFa4EAb7B53B3530Ea1DdC871B1c02D3dB13d8625"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNftToStake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256,address,uint256)": {
        "details": "The stake should existwhen adding the NFT we need to simulate an untake/stake because we need to recalculate the new historyAverageAmount, stakingInfo.totalStakingUnits and stakingInfo.historyRewardPot"
      },
      "applyPercent(uint256,uint256)": {
        "params": {
          "number": "The number to multiply",
          "percent": "The percentage to apply"
        },
        "returns": {
          "_0": "(uint256) the operation result"
        }
      },
      "claimTickets(address,StakingLib.UserStake storage,address)": {
        "params": {
          "staker": "the address fo the staker",
          "ticket": "the address of the ticket instance",
          "userStake": "the stake to claim tickets from"
        }
      },
      "getCurrentPeriodAverageReward(StakingLib.StakingInfo storage,uint256,bool)": {
        "params": {
          "excludeLast": "wether or not exclude the last block",
          "stakingInfo": "the struct containing staking info",
          "totalReward": "the total reward in current period"
        },
        "returns": {
          "_0": "(uint256) number of blocks in history"
        }
      },
      "getCurrentPeriodLength(StakingLib.StakingInfo storage)": {
        "returns": {
          "_0": "(uint256) The current period length"
        }
      },
      "getCurrentPeriodLength(StakingLib.StakingInfo storage,bool)": {
        "params": {
          "excludeLast": "a flag that indicates to include the last block or not"
        },
        "returns": {
          "_0": "(uint256) The current period length"
        }
      },
      "getHistoryAverageForStaker(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "returns": {
          "_0": "(uint256) the calculated average"
        }
      },
      "getHistoryLength(StakingLib.StakingInfo storage)": {
        "returns": {
          "_0": "(uint256) The history length"
        }
      },
      "getHistoryLengthBeforeStakerEntered(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake"
        },
        "returns": {
          "_0": "(uint256) The length of the history"
        }
      },
      "getLockDuration(StakingLib.StakingInfo storage,bytes)": {
        "details": "the bytes should contain the index of the lock in the first 32 bytesthe index should be < locks.length",
        "params": {
          "data": "bytes from the stake action"
        },
        "returns": {
          "_0": "uint256 The duration of the lock (time for wich the stake will be locked)"
        }
      },
      "getNewHistoryAverageReward(uint256,uint256,uint256,uint256,uint256)": {
        "details": "this is called **before** we update history end block",
        "returns": {
          "_0": "uint256 The calculated newHistoryAverageReward"
        }
      },
      "getStakeIndexFromCalldata(bytes)": {
        "details": "[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]",
        "params": {
          "data": "bytes from the stake action"
        },
        "returns": {
          "_0": "(uint256) the parsed index"
        }
      },
      "getStakerReward(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "params": {
          "stakeIndex": "the index of the stake"
        },
        "returns": {
          "_0": "(uint256) The total rewards acumulated till now"
        }
      },
      "getStakerRewardFromCurrentPeriod(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "returns": {
          "_0": "(uint256) the calculater reward"
        }
      },
      "getStakerRewardFromHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "returns": {
          "_0": "(uint256) the calculater reward"
        }
      },
      "getStakerTimeInHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "returns": {
          "_0": "(uint256) number of blocks in history"
        }
      },
      "getTokenAddressFromCalldata(bytes)": {
        "details": "[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]",
        "params": {
          "data": "bytes from the stake action"
        },
        "returns": {
          "_0": "(address) the parsed address"
        }
      },
      "getTokenIdFromCalldata(bytes)": {
        "details": "[(index 32 bytes), (nft address 20 bytes), (tokenId 32 bytes)]",
        "params": {
          "data": "bytes from the stake action"
        },
        "returns": {
          "_0": "(uint256) the parsed tokenId"
        }
      },
      "historyRewardPot(uint256,uint256,uint256)": {
        "params": {
          "oldHistoryRewardPot": "the old history reward pot",
          "stakerReward": "the staker reward",
          "totalRewardInCurrentPeriod": "the total reward from current period"
        },
        "returns": {
          "_0": "(uint256) the new history reward pot"
        }
      },
      "parse32BytesToUint256(bytes,uint256)": {
        "params": {
          "data": "bytes data",
          "from": "from where to start the parsing"
        }
      },
      "parseBytesToAddress(bytes,uint256)": {
        "params": {
          "data": "bytes data",
          "from": "from where to start the parsing"
        }
      },
      "removeNftFromStake(StakingLib.UserStakedToken storage,address)": {
        "params": {
          "staker": "the address of the owner of the stake"
        }
      },
      "stake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,address,uint256,bytes)": {
        "details": "Users wil be able to unstake only after the lock durationn has pased.The lock duration in the data bytes is required, its the index of the locks array Should be the fist 32 bytes in the bytes array",
        "params": {
          "amount": "the inumber of tokens to be staked",
          "data": "the bytes containig extra information about the staking lock duration index: fist 32 bytes (Number) - Required NFT address: next 20 bytes (address) NFT tokenId: next 32 bytes (Number)"
        }
      },
      "totalGeneratedReward(uint256,uint256,uint256)": {
        "params": {
          "_block": "the current block",
          "historyStartBlock": "the first history block",
          "rewardPerBlock": "the amount of tokens rewarded per block"
        },
        "returns": {
          "_0": "(uint256) number of blocks in history"
        }
      },
      "unstake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "details": "Unstaking tokens is an atomic operation—either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be   transferred back to their account, and their personalStakeIndex will increment to the next active stake.",
        "returns": {
          "_0": "uint256 The number of tokens unstaked"
        }
      },
      "userPoolShare(StakingLib.UserStake[] storage,uint256,uint256)": {
        "params": {
          "totalStakingUnits": "sum of all user stake shares"
        },
        "returns": {
          "_0": "(uint256) the calculater pool share"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNftToStake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256,address,uint256)": {
        "notice": "Allows user to stake an nft to an existing stake for extra rewardit MUST revert if the added token has no multiplier"
      },
      "applyPercent(uint256,uint256)": {
        "notice": "Will apply a percentage to a number"
      },
      "claimTickets(address,StakingLib.UserStake storage,address)": {
        "notice": "Mint tickets to the stakerThe amount of tickets depends on the amount of tokens staked and the duration the tokens a locked for."
      },
      "getCurrentPeriodAverageReward(StakingLib.StakingInfo storage,uint256,bool)": {
        "notice": "Calculate the average reward for the current period"
      },
      "getCurrentPeriodLength(StakingLib.StakingInfo storage)": {
        "notice": "Will calculate the current period length"
      },
      "getCurrentPeriodLength(StakingLib.StakingInfo storage,bool)": {
        "notice": "Will calculate the current period length optionaly including the last block"
      },
      "getHistoryAverageForStaker(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Calculate the history average for staker"
      },
      "getHistoryLength(StakingLib.StakingInfo storage)": {
        "notice": "Will calculate the history length in blocks"
      },
      "getHistoryLengthBeforeStakerEntered(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Will calculate and return what the history length was a the moment the stake was created"
      },
      "getLockDuration(StakingLib.StakingInfo storage,bytes)": {
        "notice": "Will get the lock duration from the stake bytes data"
      },
      "getNewHistoryAverageReward(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the new History Average Reward"
      },
      "getStakeIndexFromCalldata(bytes)": {
        "notice": "Will parse the stake bytes data to get the stake index"
      },
      "getStakerReward(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Will calculate and return the total reward user has accumulated till now for a specific stake"
      },
      "getStakerRewardFromCurrentPeriod(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Calculate the reward from current period"
      },
      "getStakerRewardFromHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Calculate the stake reward from history"
      },
      "getStakerTimeInHistory(StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Calculate the staker time in history"
      },
      "getTokenAddressFromCalldata(bytes)": {
        "notice": "Will parse the stake bytes data to get the NFT address"
      },
      "getTokenIdFromCalldata(bytes)": {
        "notice": "Will parse the stake bytes data to get the NFT tokeId"
      },
      "historyRewardPot(uint256,uint256,uint256)": {
        "notice": "Calculate the new history reward pot"
      },
      "parse32BytesToUint256(bytes,uint256)": {
        "notice": "Will parse bytes data to get an uint256"
      },
      "parseBytesToAddress(bytes,uint256)": {
        "notice": "Will parse bytes data to get an address"
      },
      "removeNftFromStake(StakingLib.UserStakedToken storage,address)": {
        "notice": "Remove the preveusly staked NFT from the stake"
      },
      "stake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,address,uint256,bytes)": {
        "notice": "Allows user to stake tokensOptionaly user can stake a NFT token for extra reward"
      },
      "totalGeneratedReward(uint256,uint256,uint256)": {
        "notice": "Calculate the total generated reward for a period"
      },
      "unstake(RewardStreamerLib.RewardStreamInfo storage,StakingLib.StakingInfo storage,StakingLib.UserStake[] storage,uint256)": {
        "notice": "Allows user to unstake the staked tokensThe tokens are allowed to be unstaked only after the lock duration has passedMUST trigger Unstaked event"
      },
      "userPoolShare(StakingLib.UserStake[] storage,uint256,uint256)": {
        "notice": "Calculate the user share in the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}