{
  "address": "0xFa4EAb7B53B3530Ea1DdC871B1c02D3dB13d8625",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_isContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x654a02a640843915bc46285bc02b6158b752fef822d756f8cf3f6e6185e9936c",
  "receipt": {
    "to": null,
    "from": "0xA27DF20E6579aC472481F0Ea918165d24bFb713b",
    "contractAddress": "0xFa4EAb7B53B3530Ea1DdC871B1c02D3dB13d8625",
    "transactionIndex": 1,
    "gasUsed": "1359101",
    "logsBloom": "0x
    "blockHash": "0xd2a7fc47cc02bd5050ff1b4642b7f8b851babfed7c2398da85f354b435ef64a1",
    "transactionHash": "0x654a02a640843915bc46285bc02b6158b752fef822d756f8cf3f6e6185e9936c",
    "logs": [],
    "blockNumber": 26269945,
    "cumulativeGasUsed": "2746177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9ed73cb8aea12ac13912a00e2d28ba22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_isContract(address)\":{\"details\":\"Returns true if `account` is a contract.\",\"params\":{\"account\":\"the address to check\"},\"returns\":{\"_0\":\"(bool) if the account is a contract\"}},\"addRewardStream(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256)\":{\"params\":{\"rewardLastBlock\":\"The last block of the period\",\"rewardPerBlock\":\"The amount of tokens rewarded per block\",\"rewardStreamIndex\":\"The reward index\"}},\"iterateRewards(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256,uint256)\":{\"params\":{\"fromBlock\":\"the block number from which the reward is calculated\",\"rewardIndex\":\"the ireward index\",\"rewardStreamIndex\":\"the index of the reward stream\",\"toBlock\":\"the block number till which the reward is calculated\"},\"returns\":{\"_0\":\"(uint256) the calculate reward\"}},\"setRewardToken(RewardStreamerLib.RewardStreamInfo storage,address)\":{\"params\":{\"rewardTokenAddress\":\"The reward token address\"}},\"unsafeGetRewardsFromRange(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256)\":{\"params\":{\"fromBlock\":\"the block number from which the reward is calculated\",\"toBlock\":\"the block number till which the reward is calculated\"},\"returns\":{\"_0\":\"(uint256) the total reward\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewardStream(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256)\":{\"notice\":\"Will create a new rewad stream\"},\"iterateRewards(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256,uint256)\":{\"notice\":\"Iterate the rewards\"},\"setRewardToken(RewardStreamerLib.RewardStreamInfo storage,address)\":{\"notice\":\"Will setup the token to use for reward\"},\"unsafeGetRewardsFromRange(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256)\":{\"notice\":\"Get the rewards for a period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/RewardStreamerLib.sol\":\"RewardStreamerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Raffle/IRaffleTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticekt for Coinburp Raffle\\n/// @author Gilbert Kim @gilbertk422\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x012a6017282b704f9d4a10524d6490582aae41ab5f721ea3dc4202de46a32896\",\"license\":\"MIT\"},\"contracts/Staking/RewardStreamerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenHelper.sol\\\";\\n\\nlibrary RewardStreamerLib {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct RewardStreamInfo {\\n\\t\\tRewardStream[] rewardStreams;\\n\\t\\tuint256 rewardStreamsLength;\\n\\t\\tuint256 deployedAtBlock;\\n\\t\\taddress rewardToken;\\n\\t}\\n\\n\\tstruct RewardStream {\\n\\t\\tuint256[] periodRewards;\\n\\t\\tuint256[] periodEnds;\\n\\t\\tuint256 rewardStreamCursor;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will setup the token to use for reward\\n\\t* @param rewardTokenAddress The reward token address\\n\\t*/\\n\\tfunction setRewardToken(RewardStreamInfo storage rewardStreamInfo, address rewardTokenAddress) public {\\n\\t\\trewardStreamInfo.rewardToken = address(rewardTokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t* @notice Will create a new rewad stream\\n\\t* @param rewardStreamIndex The reward index\\n\\t* @param rewardPerBlock The amount of tokens rewarded per block\\n\\t* @param rewardLastBlock The last block of the period\\n\\t*/\\n\\tfunction addRewardStream(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint256 rewardPerBlock,\\n\\t\\tuint256 rewardLastBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// e.g. current length = 0 and we add index 1\\n\\t\\trequire(rewardStreamIndex < rewardStreamInfo.rewardStreams.length.add(1), \\\"RewardStreamer: you cannot skip an index\\\");\\n\\n\\t\\tuint256 tokensInReward;\\n\\n\\t\\tif(rewardStreamInfo.rewardStreams.length > rewardStreamIndex) {\\n\\t\\t\\tRewardStream storage rewardStream = rewardStreamInfo.rewardStreams[rewardStreamIndex];\\n\\t\\t\\tuint256[] storage periodEnds = rewardStream.periodEnds;\\n\\n\\t\\t\\tuint periodStart = periodEnds.length == 0\\n\\t\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t\\t: periodEnds[periodEnds.length - 1];\\n\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t} else {\\n\\t\\t\\tRewardStream memory rewardStream;\\n\\n\\t\\t\\tuint periodStart = rewardStreamInfo.deployedAtBlock;\\n\\t\\t\\trequire(periodStart < rewardLastBlock, \\\"RewardStreamer: periodStart must be smaller than rewardLastBlock\\\");\\n\\n\\t\\t\\trewardStreamInfo.rewardStreams.push(rewardStream);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds.push(rewardLastBlock);\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.push(rewardPerBlock);\\n\\n\\t\\t\\ttokensInReward = (rewardLastBlock.sub(periodStart)).mul(rewardPerBlock);\\n\\t\\t}\\n\\n\\t\\tTokenHelper.ERC20TransferFrom(address(rewardStreamInfo.rewardToken), msg.sender, address(this), tokensInReward);\\n\\n\\t\\treturn tokensInReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Get the rewards for a period\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @return (uint256) the total reward\\n\\t*/\\n\\tfunction unsafeGetRewardsFromRange(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(!_isContract(msg.sender), \\\"StakingReward: unsafe function for contract call\\\");\\n\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\t0\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Iterate the rewards\\n\\t* @param rewardStreamIndex the index of the reward stream\\n\\t* @param fromBlock the block number from which the reward is calculated\\n\\t* @param toBlock the block number till which the reward is calculated\\n\\t* @param rewardIndex the ireward index\\n\\t* @return (uint256) the calculate reward\\n\\t*/\\n\\tfunction iterateRewards(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// the start block is bigger than\\n\\t\\tif(rewardIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardIndex - 1];\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\treturn iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\trewardStreamIndex,\\n\\t\\t\\t\\tfromBlock,\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardIndex.add(1)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\tfunction getRewardAndUpdateCursor (\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 fromBlock,\\n\\t\\tuint256 toBlock\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 currentReward;\\n\\n\\t\\tfor(uint256 i; i < rewardStreamInfo.rewardStreams.length; i++) {\\n\\t\\t\\tcurrentReward = currentReward.add(iterateRewardsWithCursor(\\n\\t\\t\\t\\trewardStreamInfo,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tMath.max(fromBlock, rewardStreamInfo.deployedAtBlock),\\n\\t\\t\\t\\ttoBlock,\\n\\t\\t\\t\\trewardStreamInfo.rewardStreams[i].rewardStreamCursor\\n\\t\\t\\t));\\n\\t\\t}\\n\\n\\t\\treturn currentReward;\\n\\t}\\n\\n\\tfunction bumpStreamCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t// this step is important to avoid going out of index\\n\\t\\tif(rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor < rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\trewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor = rewardStreamInfo.rewardStreams[rewardStreamIndex].rewardStreamCursor.add(1);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction iterateRewardsWithCursor(\\n\\t\\tRewardStreamInfo storage rewardStreamInfo,\\n\\t\\tuint256 rewardStreamIndex,\\n\\t\\tuint fromBlock,\\n\\t\\tuint toBlock,\\n\\t\\tuint256 rewardPeriodIndex\\n\\t)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif(rewardPeriodIndex >= rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards.length) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint currentPeriodEnd = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex];\\n\\t\\tuint currentPeriodReward = rewardStreamInfo.rewardStreams[rewardStreamIndex].periodRewards[rewardPeriodIndex];\\n\\n\\t\\tuint256 totalReward = 0;\\n\\n\\t\\t// what's the lowest block in current period?\\n\\t\\tuint currentPeriodStart = rewardPeriodIndex == 0\\n\\t\\t\\t? rewardStreamInfo.deployedAtBlock\\n\\t\\t\\t: rewardStreamInfo.rewardStreams[rewardStreamIndex].periodEnds[rewardPeriodIndex - 1];\\n\\n\\t\\t// is the fromBlock included in period?\\n\\t\\tif(fromBlock <= currentPeriodEnd) {\\n\\t\\t\\tuint256 lower = Math.max(fromBlock, currentPeriodStart);\\n\\t\\t\\tuint256 upper = Math.min(toBlock, currentPeriodEnd);\\n\\n\\t\\t\\tuint256 blocksInPeriod = upper.sub(lower);\\n\\n\\t\\t\\ttotalReward = blocksInPeriod.mul(currentPeriodReward);\\n\\t\\t} else {\\n\\t\\t\\t// the fromBlock passed this reward period, we can start\\n\\t\\t\\t// skipping it for next reads\\n\\t\\t\\tbumpStreamCursor(rewardStreamInfo, rewardStreamIndex);\\n\\n\\t\\t\\treturn iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\tif(toBlock > currentPeriodEnd) {\\n\\t\\t\\t// we need to move to next reward period\\n\\t\\t\\ttotalReward += iterateRewards(rewardStreamInfo, rewardStreamIndex, fromBlock, toBlock, rewardPeriodIndex.add(1));\\n\\t\\t}\\n\\n\\t\\treturn totalReward;\\n\\t}\\n\\n\\t/**\\n\\t* @dev Returns true if `account` is a contract.\\n\\t* @param account the address to check\\n\\t* @return (bool) if the account is a contract\\n\\t*/\\n\\tfunction _isContract(address account) public view returns (bool) {\\n\\t\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t\\t// constructor execution.\\n\\n\\t\\t\\tuint256 size;\\n\\t\\t\\t// solhint-disable-next-line no-inline-assembly\\n\\t\\t\\tassembly { size := extcodesize(account) }\\n\\t\\t\\treturn size > 0;\\n\\t}\\n}\",\"keccak256\":\"0xf000bdedc7c108f1c4e8193691f3a86d8f69f1b2505fabd3909e757ac64ae6f7\",\"license\":\"MIT\"},\"contracts/Staking/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport \\\"../Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                (, bytes memory data) = token\\n                    .call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\\n\\n                return abi.decode(data, (address)) == address(this);\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n    }\\n}\",\"keccak256\":\"0xf6c8bcd2f81b9f551d69694149d66db1619f9663e334a679c42188f43933720d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6117d6610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c8063973ccf5b11610065578063973ccf5b1461015d578063b9718d4214610186578063c02ceb0a146101c3578063c6e4df7a146101f357610092565b8063284e433b146100975780633a09889a146100c05780637d48441f146100fd578063838410d01461012d575b600080fd5b8180156100a357600080fd5b506100be60048036038101906100b991906111fd565b610230565b005b8180156100cc57600080fd5b506100e760048036038101906100e29190611239565b61038c565b6040516100f49190611581565b60405180910390f35b61011760048036038101906101129190611198565b61043b565b6040516101249190611506565b60405180910390f35b610147600480360381019061014291906112eb565b61044e565b6040516101549190611581565b60405180910390f35b81801561016957600080fd5b50610184600480360381019061017f91906111c1565b610754565b005b81801561019257600080fd5b506101ad60048036038101906101a89190611288565b61079b565b6040516101ba9190611581565b60405180910390f35b6101dd60048036038101906101d89190611239565b610c9d565b6040516101ea9190611581565b60405180910390f35b8180156101ff57600080fd5b5061021a600480360381019061021591906112eb565b610d49565b6040516102279190611581565b60405180910390f35b81600001818154811061026c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001805490508260000182815481106102bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201541015610388576103366001836000018381548110610316577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016002015461105990919063ffffffff16565b826000018281548110610372577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201819055505b5050565b60008060005b856000018054905081101561042f5761041a61040b87836103b7898b6002015461106f565b888b60000187815481106103f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020154610d49565b8361105990919063ffffffff16565b91508080610427906116e3565b915050610392565b50809150509392505050565b600080823b905060008111915050919050565b600085600001858154811061048c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000018054905082106104b0576000905061074b565b60008660000186815481106104ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018381548110610537577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000876000018781548110610582577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000184815481106105cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000808086146106835789600001898154811061061e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010160018761063c919061165d565b81548110610673577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610689565b89600201545b90508388116106e257600061069e898361106f565b905060006106ac8987611089565b905060006106c383836110a290919063ffffffff16565b90506106d886826110b890919063ffffffff16565b945050505061070d565b6107028a8a8a8a6106fd60018c61105990919063ffffffff16565b61044e565b94505050505061074b565b83871115610743576107358a8a8a8a61073060018c61105990919063ffffffff16565b61044e565b8261074091906115ad565b91505b819450505050505b95945050505050565b808260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006107b86001866000018054905061105990919063ffffffff16565b84106107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f090611561565b60405180910390fd5b60008486600001805490501115610a27576000866000018681548110610848577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201905060008160010190506000808280549050146108c657816001838054905061087f919061165d565b815481106108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546108cc565b88600201545b9050858110610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090790611541565b60405180910390fd5b88600001888154811061094c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018690806001815401808255809150506001900390600052602060002001600090919091909150558860000188815481106109c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001879080600181540180825580915050600190039060005260206000200160009091909190915055610a1d87610a0f83896110a290919063ffffffff16565b6110b890919063ffffffff16565b9350505050610c00565b610a2f6110ce565b600087600201549050848110610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190611541565b60405180910390fd5b876000018290806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019080519060200190610ac49291906110ef565b506020820151816001019080519060200190610ae19291906110ef565b50604082015181600201555050876000018781548110610b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101859080600181540180825580915050600190039060005260206000200160009091909190915055876000018781548110610b9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001869080600181540180825580915050600190039060005260206000200160009091909190915055610bfb86610bed83886110a290919063ffffffff16565b6110b890919063ffffffff16565b925050505b734bba64b19dfef99994BD40B7C7e2D4C70CfB95FD63a1c011248760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330856040518563ffffffff1660e01b8152600401610c6194939291906114c1565b60006040518083038186803b158015610c7957600080fd5b505af4158015610c8d573d6000803e3d6000fd5b5050505080915050949350505050565b6000610ca83361043b565b15610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90611521565b60405180910390fd5b6000805b8560000180549050811015610d3d57610d28610d198783610d11898b6002015461106f565b88600061044e565b8361105990919063ffffffff16565b91508080610d35906116e3565b915050610cec565b50809150509392505050565b6000856000018581548110610d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001805490508210610dab5760009050611050565b6000866000018681548110610de9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018381548110610e32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000876000018781548110610e7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000018481548110610ec6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600080808614610f7e57896000018981548110610f19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101600187610f37919061165d565b81548110610f6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610f84565b89600201545b9050838811610fdd576000610f99898361106f565b90506000610fa78987611089565b90506000610fbe83836110a290919063ffffffff16565b9050610fd386826110b890919063ffffffff16565b9450505050611012565b610fe78a8a610230565b6110078a8a8a8a61100260018c61105990919063ffffffff16565b61044e565b945050505050611050565b838711156110485761103a8a8a8a8a61103560018c61105990919063ffffffff16565b61044e565b8261104591906115ad565b91505b819450505050505b95945050505050565b6000818361106791906115ad565b905092915050565b60008183101561107f5781611081565b825b905092915050565b6000818310611098578161109a565b825b905092915050565b600081836110b0919061165d565b905092915050565b600081836110c69190611603565b905092915050565b60405180606001604052806060815260200160608152602001600081525090565b82805482825590600052602060002090810192821561112b579160200282015b8281111561112a57825182559160200191906001019061110f565b5b509050611138919061113c565b5090565b5b8082111561115557600081600090555060010161113d565b5090565b6000813590506111688161175b565b92915050565b60008135905061117d81611772565b92915050565b60008135905061119281611789565b92915050565b6000602082840312156111aa57600080fd5b60006111b884828501611159565b91505092915050565b600080604083850312156111d457600080fd5b60006111e28582860161116e565b92505060206111f385828601611159565b9150509250929050565b6000806040838503121561121057600080fd5b600061121e8582860161116e565b925050602061122f85828601611183565b9150509250929050565b60008060006060848603121561124e57600080fd5b600061125c8682870161116e565b935050602061126d86828701611183565b925050604061127e86828701611183565b9150509250925092565b6000806000806080858703121561129e57600080fd5b60006112ac8782880161116e565b94505060206112bd87828801611183565b93505060406112ce87828801611183565b92505060606112df87828801611183565b91505092959194509250565b600080600080600060a0868803121561130357600080fd5b60006113118882890161116e565b955050602061132288828901611183565b945050604061133388828901611183565b935050606061134488828901611183565b925050608061135588828901611183565b9150509295509295909350565b61136b81611691565b82525050565b61137a816116a3565b82525050565b600061138d60308361159c565b91507f5374616b696e675265776172643a20756e736166652066756e6374696f6e206660008301527f6f7220636f6e74726163742063616c6c000000000000000000000000000000006020830152604082019050919050565b60006113f360408361159c565b91507f52657761726453747265616d65723a20706572696f645374617274206d75737460008301527f20626520736d616c6c6572207468616e207265776172644c617374426c6f636b6020830152604082019050919050565b600061145960288361159c565b91507f52657761726453747265616d65723a20796f752063616e6e6f7420736b69702060008301527f616e20696e6465780000000000000000000000000000000000000000000000006020830152604082019050919050565b6114bb816116d9565b82525050565b60006080820190506114d66000830187611362565b6114e36020830186611362565b6114f06040830185611362565b6114fd60608301846114b2565b95945050505050565b600060208201905061151b6000830184611371565b92915050565b6000602082019050818103600083015261153a81611380565b9050919050565b6000602082019050818103600083015261155a816113e6565b9050919050565b6000602082019050818103600083015261157a8161144c565b9050919050565b600060208201905061159660008301846114b2565b92915050565b600082825260208201905092915050565b60006115b8826116d9565b91506115c3836116d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115f8576115f761172c565b5b828201905092915050565b600061160e826116d9565b9150611619836116d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116525761165161172c565b5b828202905092915050565b6000611668826116d9565b9150611673836116d9565b9250828210156116865761168561172c565b5b828203905092915050565b600061169c826116b9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116ee826116d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117215761172061172c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61176481611691565b811461176f57600080fd5b50565b61177b816116af565b811461178657600080fd5b50565b611792816116d9565b811461179d57600080fd5b5056fea2646970667358221220982df214e5a03ae8b1467ead8b39346ee29cdd722039700e17dafad47dcc428b64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c8063973ccf5b11610065578063973ccf5b1461015d578063b9718d4214610186578063c02ceb0a146101c3578063c6e4df7a146101f357610092565b8063284e433b146100975780633a09889a146100c05780637d48441f146100fd578063838410d01461012d575b600080fd5b8180156100a357600080fd5b506100be60048036038101906100b991906111fd565b610230565b005b8180156100cc57600080fd5b506100e760048036038101906100e29190611239565b61038c565b6040516100f49190611581565b60405180910390f35b61011760048036038101906101129190611198565b61043b565b6040516101249190611506565b60405180910390f35b610147600480360381019061014291906112eb565b61044e565b6040516101549190611581565b60405180910390f35b81801561016957600080fd5b50610184600480360381019061017f91906111c1565b610754565b005b81801561019257600080fd5b506101ad60048036038101906101a89190611288565b61079b565b6040516101ba9190611581565b60405180910390f35b6101dd60048036038101906101d89190611239565b610c9d565b6040516101ea9190611581565b60405180910390f35b8180156101ff57600080fd5b5061021a600480360381019061021591906112eb565b610d49565b6040516102279190611581565b60405180910390f35b81600001818154811061026c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001805490508260000182815481106102bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201541015610388576103366001836000018381548110610316577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016002015461105990919063ffffffff16565b826000018281548110610372577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600201819055505b5050565b60008060005b856000018054905081101561042f5761041a61040b87836103b7898b6002015461106f565b888b60000187815481106103f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020154610d49565b8361105990919063ffffffff16565b91508080610427906116e3565b915050610392565b50809150509392505050565b600080823b905060008111915050919050565b600085600001858154811061048c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000018054905082106104b0576000905061074b565b60008660000186815481106104ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018381548110610537577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000876000018781548110610582577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000184815481106105cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000808086146106835789600001898154811061061e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010160018761063c919061165d565b81548110610673577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610689565b89600201545b90508388116106e257600061069e898361106f565b905060006106ac8987611089565b905060006106c383836110a290919063ffffffff16565b90506106d886826110b890919063ffffffff16565b945050505061070d565b6107028a8a8a8a6106fd60018c61105990919063ffffffff16565b61044e565b94505050505061074b565b83871115610743576107358a8a8a8a61073060018c61105990919063ffffffff16565b61044e565b8261074091906115ad565b91505b819450505050505b95945050505050565b808260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006107b86001866000018054905061105990919063ffffffff16565b84106107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f090611561565b60405180910390fd5b60008486600001805490501115610a27576000866000018681548110610848577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201905060008160010190506000808280549050146108c657816001838054905061087f919061165d565b815481106108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546108cc565b88600201545b9050858110610910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090790611541565b60405180910390fd5b88600001888154811061094c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018690806001815401808255809150506001900390600052602060002001600090919091909150558860000188815481106109c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001879080600181540180825580915050600190039060005260206000200160009091909190915055610a1d87610a0f83896110a290919063ffffffff16565b6110b890919063ffffffff16565b9350505050610c00565b610a2f6110ce565b600087600201549050848110610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190611541565b60405180910390fd5b876000018290806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019080519060200190610ac49291906110ef565b506020820151816001019080519060200190610ae19291906110ef565b50604082015181600201555050876000018781548110610b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101859080600181540180825580915050600190039060005260206000200160009091909190915055876000018781548110610b9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001869080600181540180825580915050600190039060005260206000200160009091909190915055610bfb86610bed83886110a290919063ffffffff16565b6110b890919063ffffffff16565b925050505b73__$11791ee3c30036632c128bd6c5593b6470$__63a1c011248760030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330856040518563ffffffff1660e01b8152600401610c6194939291906114c1565b60006040518083038186803b158015610c7957600080fd5b505af4158015610c8d573d6000803e3d6000fd5b5050505080915050949350505050565b6000610ca83361043b565b15610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90611521565b60405180910390fd5b6000805b8560000180549050811015610d3d57610d28610d198783610d11898b6002015461106f565b88600061044e565b8361105990919063ffffffff16565b91508080610d35906116e3565b915050610cec565b50809150509392505050565b6000856000018581548110610d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001805490508210610dab5760009050611050565b6000866000018681548110610de9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001018381548110610e32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000876000018781548110610e7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000018481548110610ec6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600080808614610f7e57896000018981548110610f19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101600187610f37919061165d565b81548110610f6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610f84565b89600201545b9050838811610fdd576000610f99898361106f565b90506000610fa78987611089565b90506000610fbe83836110a290919063ffffffff16565b9050610fd386826110b890919063ffffffff16565b9450505050611012565b610fe78a8a610230565b6110078a8a8a8a61100260018c61105990919063ffffffff16565b61044e565b945050505050611050565b838711156110485761103a8a8a8a8a61103560018c61105990919063ffffffff16565b61044e565b8261104591906115ad565b91505b819450505050505b95945050505050565b6000818361106791906115ad565b905092915050565b60008183101561107f5781611081565b825b905092915050565b6000818310611098578161109a565b825b905092915050565b600081836110b0919061165d565b905092915050565b600081836110c69190611603565b905092915050565b60405180606001604052806060815260200160608152602001600081525090565b82805482825590600052602060002090810192821561112b579160200282015b8281111561112a57825182559160200191906001019061110f565b5b509050611138919061113c565b5090565b5b8082111561115557600081600090555060010161113d565b5090565b6000813590506111688161175b565b92915050565b60008135905061117d81611772565b92915050565b60008135905061119281611789565b92915050565b6000602082840312156111aa57600080fd5b60006111b884828501611159565b91505092915050565b600080604083850312156111d457600080fd5b60006111e28582860161116e565b92505060206111f385828601611159565b9150509250929050565b6000806040838503121561121057600080fd5b600061121e8582860161116e565b925050602061122f85828601611183565b9150509250929050565b60008060006060848603121561124e57600080fd5b600061125c8682870161116e565b935050602061126d86828701611183565b925050604061127e86828701611183565b9150509250925092565b6000806000806080858703121561129e57600080fd5b60006112ac8782880161116e565b94505060206112bd87828801611183565b93505060406112ce87828801611183565b92505060606112df87828801611183565b91505092959194509250565b600080600080600060a0868803121561130357600080fd5b60006113118882890161116e565b955050602061132288828901611183565b945050604061133388828901611183565b935050606061134488828901611183565b925050608061135588828901611183565b9150509295509295909350565b61136b81611691565b82525050565b61137a816116a3565b82525050565b600061138d60308361159c565b91507f5374616b696e675265776172643a20756e736166652066756e6374696f6e206660008301527f6f7220636f6e74726163742063616c6c000000000000000000000000000000006020830152604082019050919050565b60006113f360408361159c565b91507f52657761726453747265616d65723a20706572696f645374617274206d75737460008301527f20626520736d616c6c6572207468616e207265776172644c617374426c6f636b6020830152604082019050919050565b600061145960288361159c565b91507f52657761726453747265616d65723a20796f752063616e6e6f7420736b69702060008301527f616e20696e6465780000000000000000000000000000000000000000000000006020830152604082019050919050565b6114bb816116d9565b82525050565b60006080820190506114d66000830187611362565b6114e36020830186611362565b6114f06040830185611362565b6114fd60608301846114b2565b95945050505050565b600060208201905061151b6000830184611371565b92915050565b6000602082019050818103600083015261153a81611380565b9050919050565b6000602082019050818103600083015261155a816113e6565b9050919050565b6000602082019050818103600083015261157a8161144c565b9050919050565b600060208201905061159660008301846114b2565b92915050565b600082825260208201905092915050565b60006115b8826116d9565b91506115c3836116d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115f8576115f761172c565b5b828201905092915050565b600061160e826116d9565b9150611619836116d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116525761165161172c565b5b828202905092915050565b6000611668826116d9565b9150611673836116d9565b9250828210156116865761168561172c565b5b828203905092915050565b600061169c826116b9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116ee826116d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117215761172061172c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61176481611691565b811461176f57600080fd5b50565b61177b816116af565b811461178657600080fd5b50565b611792816116d9565b811461179d57600080fd5b5056fea2646970667358221220982df214e5a03ae8b1467ead8b39346ee29cdd722039700e17dafad47dcc428b64736f6c63430008000033",
  "libraries": {
    "TokenHelper": "0x4bba64b19dfef99994BD40B7C7e2D4C70CfB95FD"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_isContract(address)": {
        "details": "Returns true if `account` is a contract.",
        "params": {
          "account": "the address to check"
        },
        "returns": {
          "_0": "(bool) if the account is a contract"
        }
      },
      "addRewardStream(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256)": {
        "params": {
          "rewardLastBlock": "The last block of the period",
          "rewardPerBlock": "The amount of tokens rewarded per block",
          "rewardStreamIndex": "The reward index"
        }
      },
      "iterateRewards(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256,uint256)": {
        "params": {
          "fromBlock": "the block number from which the reward is calculated",
          "rewardIndex": "the ireward index",
          "rewardStreamIndex": "the index of the reward stream",
          "toBlock": "the block number till which the reward is calculated"
        },
        "returns": {
          "_0": "(uint256) the calculate reward"
        }
      },
      "setRewardToken(RewardStreamerLib.RewardStreamInfo storage,address)": {
        "params": {
          "rewardTokenAddress": "The reward token address"
        }
      },
      "unsafeGetRewardsFromRange(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256)": {
        "params": {
          "fromBlock": "the block number from which the reward is calculated",
          "toBlock": "the block number till which the reward is calculated"
        },
        "returns": {
          "_0": "(uint256) the total reward"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewardStream(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256)": {
        "notice": "Will create a new rewad stream"
      },
      "iterateRewards(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256,uint256,uint256)": {
        "notice": "Iterate the rewards"
      },
      "setRewardToken(RewardStreamerLib.RewardStreamInfo storage,address)": {
        "notice": "Will setup the token to use for reward"
      },
      "unsafeGetRewardsFromRange(RewardStreamerLib.RewardStreamInfo storage,uint256,uint256)": {
        "notice": "Get the rewards for a period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}